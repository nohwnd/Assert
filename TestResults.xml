<?xml version="1.0" encoding="utf-8" standalone="no"?>
<test-results xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="nunit_schema_2.5.xsd" name="Pester" total="633" errors="0" failures="0" not-run="0" inconclusive="0" ignored="0" skipped="0" invalid="0" date="2021-06-01" time="23:14:36">
  <environment cwd="C:\p\assert\tst" clr-version="Unknown" machine-name="RDESKTOP" os-version="10.0.19042" user-domain="EUROPE" user="jajares" nunit-version="2.5.8.0" platform="Microsoft Windows 10 Pro|C:\Windows|\Device\Harddisk1\Partition3" />
  <culture-info current-culture="en-150" current-uiculture="en-US" />
  <test-suite type="TestFixture" name="Pester" executed="True" result="Success" success="True" time="4.5299" asserts="0" description="Pester">
    <results>
      <test-suite type="TestFixture" name="C:\p\assert\Compatibility\tst\Compatibility.Tests.ps1" executed="True" result="Success" success="True" time="0.1042" asserts="0" description="C:\p\assert\Compatibility\tst\Compatibility.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="New-PSObject" executed="True" result="Success" success="True" time="0.0078" asserts="0" description="New-PSObject">
            <results>
              <test-case description="Creates a new object of type PSCustomObject" name="New-PSObject.Creates a new object of type PSCustomObject" time="0.0024" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Creates a new PSObject with the properties populated" name="New-PSObject.Creates a new PSObject with the properties populated" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Test-NullOrWhiteSpace" executed="True" result="Success" success="True" time="0.0358" asserts="0" description="Test-NullOrWhiteSpace">
            <results>
              <test-suite type="ParameterizedTest" name="Test-NullOrWhiteSpace.Returns $true for $null or whitespace" executed="True" result="Success" success="True" time="0.0177" asserts="0" description="Returns $true for $null or whitespace">
                <results>
                  <test-case description="Returns $true for $null or whitespace" name="Test-NullOrWhiteSpace.Returns $true for $null or whitespace(null)" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Returns $true for $null or whitespace" name="Test-NullOrWhiteSpace.Returns $true for $null or whitespace(&quot; &quot;)" time="0.0021" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Returns $true for $null or whitespace" name="Test-NullOrWhiteSpace.Returns $true for $null or whitespace(&quot;  &quot;)" time="0.0021" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Returns $true for $null or whitespace" name="Test-NullOrWhiteSpace.Returns $true for $null or whitespace(&quot;&#x9;&quot;)" time="0.0049" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Returns $true for $null or whitespace" name="Test-NullOrWhiteSpace.Returns $true for $null or whitespace(&quot;&#xD;&quot;)" time="0.0021" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Returns $true for $null or whitespace" name="Test-NullOrWhiteSpace.Returns $true for $null or whitespace(&quot;&#xA;&quot;)" time="0.0021" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Returns $true for $null or whitespace" name="Test-NullOrWhiteSpace.Returns $true for $null or whitespace(&quot; &#x9; &#xD; &#xA;&quot;)" time="0.0021" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="Test-NullOrWhiteSpace.Returns $false for '&lt;value&gt;'" executed="True" result="Success" success="True" time="0.0066" asserts="0" description="Returns $false for '&lt;value&gt;'">
                <results>
                  <test-case description="Returns $false for 'a'" name="Test-NullOrWhiteSpace.Returns $false for 'a'" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Returns $false for ' abc'" name="Test-NullOrWhiteSpace.Returns $false for ' abc'" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Returns $false for '&#x9;abc&#x9;'" name="Test-NullOrWhiteSpace.Returns $false for '&#x9;abc&#x9;'" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Invoke-WithContext" executed="True" result="Success" success="True" time="0.0491" asserts="0" description="Invoke-WithContext">
            <results>
              <test-case description="Keeps the scriptblock attached to the original scope" name="Invoke-WithContext.Keeps the scriptblock attached to the original scope" time="0.0049" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Injects variable $b into the scope while keeping $a attached to the module scope" name="Invoke-WithContext.Injects variable $b into the scope while keeping $a attached to the module scope" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Does not conflict with $Context variable that is used internally" name="Invoke-WithContext.Does not conflict with $Context variable that is used internally" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\p\assert\Format\tst\Format.Tests.ps1" executed="True" result="Success" success="True" time="0.2418" asserts="0" description="C:\p\assert\Format\tst\Format.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Format-Collection" executed="True" result="Success" success="True" time="0.0092" asserts="0" description="Format-Collection">
            <results>
              <test-suite type="ParameterizedTest" name="Format-Collection.Formats collection of values '&lt;value&gt;' to '&lt;expected&gt;' using the default separator" executed="True" result="Success" success="True" time="0.003" asserts="0" description="Formats collection of values '&lt;value&gt;' to '&lt;expected&gt;' using the default separator">
                <results>
                  <test-case description="Formats collection of values '1 2 3' to '1, 2, 3' using the default separator" name="Format-Collection.Formats collection of values '1 2 3' to '1, 2, 3' using the default separator" time="0.003" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="Format-Collection.Formats collection of values '&lt;value&gt;' to '&lt;expected&gt;' using the default separator" executed="True" result="Success" success="True" time="0.0029" asserts="0" description="Formats collection of values '&lt;value&gt;' to '&lt;expected&gt;' using the default separator">
                <results>
                  <test-case description="Formats collection of values '1 2 3' to '1, 2, 3' using the default separator" name="Format-Collection.Formats collection of values '1 2 3' to '1, 2, 3' using the default separator" time="0.0029" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Format-Number" executed="True" result="Success" success="True" time="0.0264" asserts="0" description="Format-Number">
            <results>
              <test-suite type="ParameterizedTest" name="Format-Number.Formats number to use . separator (tests anything only on non-english systems --todo)" executed="True" result="Success" success="True" time="0.0139" asserts="0" description="Formats number to use . separator (tests anything only on non-english systems --todo)">
                <results>
                  <test-case description="Formats number to use . separator (tests anything only on non-english systems --todo)" name="Format-Number.Formats number to use . separator (tests anything only on non-english systems --todo)(1.1)" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Formats number to use . separator (tests anything only on non-english systems --todo)" name="Format-Number.Formats number to use . separator (tests anything only on non-english systems --todo)(1.1)" time="0.0021" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Formats number to use . separator (tests anything only on non-english systems --todo)" name="Format-Number.Formats number to use . separator (tests anything only on non-english systems --todo)(1.1)" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Formats number to use . separator (tests anything only on non-english systems --todo)" name="Format-Number.Formats number to use . separator (tests anything only on non-english systems --todo)(1.1)" time="0.0052" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Formats number to use . separator (tests anything only on non-english systems --todo)" name="Format-Number.Formats number to use . separator (tests anything only on non-english systems --todo)(1.1)" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Format-Object" executed="True" result="Success" success="True" time="0.0514" asserts="0" description="Format-Object">
            <results>
              <test-case description="Formats current process with selected properties Name and Id correctly" name="Format-Object.Formats current process with selected properties Name and Id correctly" time="0.0083" asserts="0" success="True" result="Success" executed="True" />
              <test-suite type="ParameterizedTest" name="Format-Object.Formats object '&lt;value&gt;' to '&lt;expected&gt;'" executed="True" result="Success" success="True" time="0.0054" asserts="0" description="Formats object '&lt;value&gt;' to '&lt;expected&gt;'">
                <results>
                  <test-case description="Formats object '@{Name=Jakub; Age=28}' to 'PSObject{Age=28; Name=Jakub}'" name="Format-Object.Formats object '@{Name=Jakub; Age=28}' to 'PSObject{Age=28; Name=Jakub}'" time="0.0028" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Formats object 'Assertions.TestType.Person' to 'Assertions.TestType.Person{Age=28; Name=Jakub}'" name="Format-Object.Formats object 'Assertions.TestType.Person' to 'Assertions.TestType.Person{Age=28; Name=Jakub}'" time="0.0027" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="Format-Object.Formats object '&lt;value&gt;' with selected properties '&lt;selectedProperties&gt;' to '&lt;expected&gt;'" executed="True" result="Success" success="True" time="0.0052" asserts="0" description="Formats object '&lt;value&gt;' with selected properties '&lt;selectedProperties&gt;' to '&lt;expected&gt;'">
                <results>
                  <test-case description="Formats object '@{Name=Jakub; Age=28}' with selected properties 'Age' to 'PSObject{Age=28}'" name="Format-Object.Formats object '@{Name=Jakub; Age=28}' with selected properties 'Age' to 'PSObject{Age=28}'" time="0.0026" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Formats object 'Assertions.TestType.Person' with selected properties 'Name' to 'Assertions.TestType.Person{Name=Jakub}'" name="Format-Object.Formats object 'Assertions.TestType.Person' with selected properties 'Name' to 'Assertions.TestType.Person{Name=Jakub}'" time="0.0026" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Format-Boolean" executed="True" result="Success" success="True" time="0.0591" asserts="0" description="Format-Boolean">
            <results>
              <test-suite type="ParameterizedTest" name="Format-Boolean.Formats boolean '&lt;value&gt;' to '&lt;expected&gt;'" executed="True" result="Success" success="True" time="0.0046" asserts="0" description="Formats boolean '&lt;value&gt;' to '&lt;expected&gt;'">
                <results>
                  <test-case description="Formats boolean 'True' to '$true'" name="Format-Boolean.Formats boolean 'True' to '$true'" time="0.0024" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Formats boolean 'False' to '$false'" name="Format-Boolean.Formats boolean 'False' to '$false'" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Format-Null" executed="True" result="Success" success="True" time="0.064" asserts="0" description="Format-Null">
            <results>
              <test-case description="Formats null to '$null'" name="Format-Null.Formats null to '$null'" time="0.0021" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Format-ScriptBlock" executed="True" result="Success" success="True" time="0.069" asserts="0" description="Format-ScriptBlock">
            <results>
              <test-case description="Formats scriptblock as string with curly braces" name="Format-ScriptBlock.Formats scriptblock as string with curly braces" time="0.0021" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Format-Hashtable" executed="True" result="Success" success="True" time="0.0853" asserts="0" description="Format-Hashtable">
            <results>
              <test-case description="Formats empty hashtable as @{}" name="Format-Hashtable.Formats empty hashtable as @{}" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
              <test-suite type="ParameterizedTest" name="Format-Hashtable.Formats hashtable as '&lt;expected&gt;'" executed="True" result="Success" success="True" time="0.0082" asserts="0" description="Formats hashtable as '&lt;expected&gt;'">
                <results>
                  <test-case description="Formats hashtable as '@{Age=28; Name=Jakub}'" name="Format-Hashtable.Formats hashtable as '@{Age=28; Name=Jakub}'" time="0.0027" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Formats hashtable as '@{A=1; H=1; Z=1}'" name="Format-Hashtable.Formats hashtable as '@{A=1; H=1; Z=1}'" time="0.0028" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Formats hashtable as '@{Hash=@{Hash=Value}}'" name="Format-Hashtable.Formats hashtable as '@{Hash=@{Hash=Value}}'" time="0.0027" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Format-Dictionary" executed="True" result="Success" success="True" time="0.1024" asserts="0" description="Format-Dictionary">
            <results>
              <test-case description="Formats empty dictionary as @{}" name="Format-Dictionary.Formats empty dictionary as @{}" time="0.0027" asserts="0" success="True" result="Success" executed="True" />
              <test-suite type="ParameterizedTest" name="Format-Dictionary.Formats dictionary as '&lt;expected&gt;'" executed="True" result="Success" success="True" time="0.0112" asserts="0" description="Formats dictionary as '&lt;expected&gt;'">
                <results>
                  <test-case description="Formats dictionary as 'Dictionary{Age=28; Name=Jakub}'" name="Format-Dictionary.Formats dictionary as 'Dictionary{Age=28; Name=Jakub}'" time="0.0057" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Formats dictionary as 'Dictionary{A=1; H=1; Z=1}'" name="Format-Dictionary.Formats dictionary as 'Dictionary{A=1; H=1; Z=1}'" time="0.0028" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Formats dictionary as 'Dictionary{Dict=Dictionary{Dict=Value}}'" name="Format-Dictionary.Formats dictionary as 'Dictionary{Dict=Dictionary{Dict=Value}}'" time="0.0028" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Format-Nicely" executed="True" result="Success" success="True" time="0.143" asserts="0" description="Format-Nicely">
            <results>
              <test-suite type="ParameterizedTest" name="Format-Nicely.Formats value '&lt;value&gt;' correctly to '&lt;expected&gt;'" executed="True" result="Success" success="True" time="0.0369" asserts="0" description="Formats value '&lt;value&gt;' correctly to '&lt;expected&gt;'">
                <results>
                  <test-case description="Formats value '' correctly to '$null'" name="Format-Nicely.Formats value '' correctly to '$null'" time="0.0024" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Formats value 'True' correctly to '$true'" name="Format-Nicely.Formats value 'True' correctly to '$true'" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Formats value 'False' correctly to '$false'" name="Format-Nicely.Formats value 'False' correctly to '$false'" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Formats value 'a' correctly to 'a'" name="Format-Nicely.Formats value 'a' correctly to 'a'" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Formats value '1' correctly to '1'" name="Format-Nicely.Formats value '1' correctly to '1'" time="0.0055" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Formats value '1 2 3' correctly to '1, 2, 3'" name="Format-Nicely.Formats value '1 2 3' correctly to '1, 2, 3'" time="0.003" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Formats value '1.1' correctly to '1.1'" name="Format-Nicely.Formats value '1.1' correctly to '1.1'" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Formats value 'int' correctly to 'int'" name="Format-Nicely.Formats value 'int' correctly to 'int'" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Formats value '@{Name=Jakub}' correctly to 'PSObject{Name=Jakub}'" name="Format-Nicely.Formats value '@{Name=Jakub}' correctly to 'PSObject{Name=Jakub}'" time="0.0029" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Formats value 'Assertions.TestType.Person' correctly to 'Assertions.TestType.Person{Age=28; Name=Jakub}'" name="Format-Nicely.Formats value 'Assertions.TestType.Person' correctly to 'Assertions.TestType.Person{Age=28; Name=Jakub}'" time="0.0029" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Formats value 'System.Collections.Hashtable' correctly to '@{Age=28; Name=Jakub}'" name="Format-Nicely.Formats value 'System.Collections.Hashtable' correctly to '@{Age=28; Name=Jakub}'" time="0.0059" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Formats value 'System.Collections.Generic.Dictionary`2[System.String,System.Object]' correctly to 'Dictionary{Age=28; Name=Jakub}'" name="Format-Nicely.Formats value 'System.Collections.Generic.Dictionary`2[System.String,System.Object]' correctly to 'Dictionary{Age=28; Name=Jakub}'" time="0.0029" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-DisplayProperty" executed="True" result="Success" success="True" time="0.1484" asserts="0" description="Get-DisplayProperty">
            <results>
              <test-suite type="ParameterizedTest" name="Get-DisplayProperty.Returns '&lt;expected&gt;' for '&lt;type&gt;'" executed="True" result="Success" success="True" time="0.0024" asserts="0" description="Returns '&lt;expected&gt;' for '&lt;type&gt;'">
                <results>
                  <test-case description="Returns 'Id Name' for 'Diagnostics.Process'" name="Get-DisplayProperty.Returns 'Id Name' for 'Diagnostics.Process'" time="0.0024" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Format-Type" executed="True" result="Success" success="True" time="0.1684" asserts="0" description="Format-Type">
            <results>
              <test-suite type="ParameterizedTest" name="Format-Type.Given '&lt;value&gt;' it returns the correct shortened type name '&lt;expected&gt;'" executed="True" result="Success" success="True" time="0.0167" asserts="0" description="Given '&lt;value&gt;' it returns the correct shortened type name '&lt;expected&gt;'">
                <results>
                  <test-case description="Given 'int' it returns the correct shortened type name 'int'" name="Format-Type.Given 'int' it returns the correct shortened type name 'int'" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given 'double' it returns the correct shortened type name 'double'" name="Format-Type.Given 'double' it returns the correct shortened type name 'double'" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given 'string' it returns the correct shortened type name 'string'" name="Format-Type.Given 'string' it returns the correct shortened type name 'string'" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given '' it returns the correct shortened type name '&lt;null&gt;'" name="Format-Type.Given '' it returns the correct shortened type name '&lt;null&gt;'" time="0.0052" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given 'psobject' it returns the correct shortened type name 'PSObject'" name="Format-Type.Given 'psobject' it returns the correct shortened type name 'PSObject'" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given 'System.Object[]' it returns the correct shortened type name 'collection'" name="Format-Type.Given 'System.Object[]' it returns the correct shortened type name 'collection'" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-ShortType" executed="True" result="Success" success="True" time="0.1892" asserts="0" description="Get-ShortType">
            <results>
              <test-suite type="ParameterizedTest" name="Get-ShortType.Given '&lt;value&gt;' it returns the correct shortened type name '&lt;expected&gt;'" executed="True" result="Success" success="True" time="0.0173" asserts="0" description="Given '&lt;value&gt;' it returns the correct shortened type name '&lt;expected&gt;'">
                <results>
                  <test-case description="Given '1' it returns the correct shortened type name 'int'" name="Get-ShortType.Given '1' it returns the correct shortened type name 'int'" time="0.0024" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given '1.1' it returns the correct shortened type name 'double'" name="Get-ShortType.Given '1.1' it returns the correct shortened type name 'double'" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given 'a' it returns the correct shortened type name 'string'" name="Get-ShortType.Given 'a' it returns the correct shortened type name 'string'" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given '' it returns the correct shortened type name '&lt;null&gt;'" name="Get-ShortType.Given '' it returns the correct shortened type name '&lt;null&gt;'" time="0.0056" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given '@{Name=Jakub}' it returns the correct shortened type name 'PSObject'" name="Get-ShortType.Given '@{Name=Jakub}' it returns the correct shortened type name 'PSObject'" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given 'System.Object[] 2 3' it returns the correct shortened type name 'collection'" name="Get-ShortType.Given 'System.Object[] 2 3' it returns the correct shortened type name 'collection'" time="0.0024" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\p\assert\tst\Get-CustomFailureMessage.Tests.ps1" executed="True" result="Success" success="True" time="0.0437" asserts="0" description="C:\p\assert\tst\Get-CustomFailureMessage.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Get-CustomFailureMessage" executed="True" result="Success" success="True" time="0.0147" asserts="0" description="Get-CustomFailureMessage">
            <results>
              <test-case description="returns correct custom message when no tokens are provided" name="Get-CustomFailureMessage.returns correct custom message when no tokens are provided" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="returns correct custom message when positional tokens are provided" name="Get-CustomFailureMessage.returns correct custom message when positional tokens are provided" time="0.0021" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="returns correct custom message when named tokens are provided" name="Get-CustomFailureMessage.returns correct custom message when named tokens are provided" time="0.0021" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="returns correct custom message when shortened named tokens are provided" name="Get-CustomFailureMessage.returns correct custom message when shortened named tokens are provided" time="0.0021" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\p\assert\tst\Boolean\Assert-False.Tests.ps1" executed="True" result="Success" success="True" time="0.0774" asserts="0" description="C:\p\assert\tst\Boolean\Assert-False.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Assert-False" executed="True" result="Success" success="True" time="0.044" asserts="0" description="Assert-False">
            <results>
              <test-suite type="TestFixture" name="Assert-False.Validate messages" executed="True" result="Success" success="True" time="0.0327" asserts="0" description="Assert-False.Validate messages">
                <results>
                  <test-suite type="ParameterizedTest" name="Assert-False.Validate messages.Given value '&lt;actual&gt;' that is not $false it returns expected message '&lt;message&gt;'" executed="True" result="Success" success="True" time="0.0071" asserts="0" description="Given value '&lt;actual&gt;' that is not $false it returns expected message '&lt;message&gt;'">
                    <results>
                      <test-case description="Given value 'True' that is not $false it returns expected message 'Expected bool '$true' to be bool '$false' or falsy value 0, &quot;&quot;, $null, @().'" name="Assert-False.Validate messages.Given value 'True' that is not $false it returns expected message 'Expected bool '$true' to be bool '$false' or falsy value 0, &quot;&quot;, $null, @().'" time="0.0036" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Given value '10' that is not $false it returns expected message 'Expected int '10' to be bool '$false' or falsy value 0, &quot;&quot;, $null, @().'" name="Assert-False.Validate messages.Given value '10' that is not $false it returns expected message 'Expected int '10' to be bool '$false' or falsy value 0, &quot;&quot;, $null, @().'" time="0.0035" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-case description="Passes when given $false" name="Assert-False.Passes when given $false" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Fails for array input even if the last item is $false" name="Assert-False.Fails for array input even if the last item is $false" time="0.0039" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Fails with custom message" name="Assert-False.Fails with custom message" time="0.0066" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Returns the value on output" name="Assert-False.Returns the value on output" time="0.0021" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Can be called with positional parameters" name="Assert-False.Can be called with positional parameters" time="0.0031" asserts="0" success="True" result="Success" executed="True" />
              <test-suite type="ParameterizedTest" name="Assert-False.Passes when given falsy value '&lt;actual&gt;'" executed="True" result="Success" success="True" time="0.0091" asserts="0" description="Passes when given falsy value '&lt;actual&gt;'">
                <results>
                  <test-case description="Passes when given falsy value '0'" name="Assert-False.Passes when given falsy value '0'" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Passes when given falsy value ''" name="Assert-False.Passes when given falsy value ''" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Passes when given falsy value ''" name="Assert-False.Passes when given falsy value ''" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Passes when given falsy value ''" name="Assert-False.Passes when given falsy value ''" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\p\assert\tst\Boolean\Assert-True.Tests.ps1" executed="True" result="Success" success="True" time="0.0699" asserts="0" description="C:\p\assert\tst\Boolean\Assert-True.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Assert-True" executed="True" result="Success" success="True" time="0.0402" asserts="0" description="Assert-True">
            <results>
              <test-suite type="TestFixture" name="Assert-True.Validate messages" executed="True" result="Success" success="True" time="0.0283" asserts="0" description="Assert-True.Validate messages">
                <results>
                  <test-suite type="ParameterizedTest" name="Assert-True.Validate messages.Given value that is not $true it returns expected message '&lt;message&gt;'" executed="True" result="Success" success="True" time="0.0069" asserts="0" description="Given value that is not $true it returns expected message '&lt;message&gt;'">
                    <results>
                      <test-case description="Given value that is not $true it returns expected message 'Expected bool '$false' to be bool '$true' or truthy value.'" name="Assert-True.Validate messages.Given value that is not $true it returns expected message 'Expected bool '$false' to be bool '$true' or truthy value.'" time="0.0035" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Given value that is not $true it returns expected message 'Expected int '0' to be bool '$true' or truthy value.'" name="Assert-True.Validate messages.Given value that is not $true it returns expected message 'Expected int '0' to be bool '$true' or truthy value.'" time="0.0034" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-case description="Passes when given $true" name="Assert-True.Passes when given $true" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Fails with custom message" name="Assert-True.Fails with custom message" time="0.0033" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Returns the value on output" name="Assert-True.Returns the value on output" time="0.0054" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Can be called with positional parameters" name="Assert-True.Can be called with positional parameters" time="0.0032" asserts="0" success="True" result="Success" executed="True" />
              <test-suite type="ParameterizedTest" name="Assert-True.Passes when given truthy" executed="True" result="Success" success="True" time="0.0121" asserts="0" description="Passes when given truthy">
                <results>
                  <test-case description="Passes when given truthy" name="Assert-True.Passes when given truthy(1)" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Passes when given truthy" name="Assert-True.Passes when given truthy(&quot;text&quot;)" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Passes when given truthy" name="Assert-True.Passes when given truthy()" time="0.0055" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Passes when given truthy" name="Assert-True.Passes when given truthy(1 2)" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\p\assert\tst\Collection\Assert-All.Tests.ps1" executed="True" result="Success" success="True" time="0.078" asserts="0" description="C:\p\assert\tst\Collection\Assert-All.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Assert-All" executed="True" result="Success" success="True" time="0.0486" asserts="0" description="Assert-All">
            <results>
              <test-case description="Returns the value on output" name="Assert-All.Returns the value on output" time="0.0025" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Can filter using variables from the sorrounding context" name="Assert-All.Can filter using variables from the sorrounding context" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Accepts FilterScript and Actual by position" name="Assert-All.Accepts FilterScript and Actual by position" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
              <test-suite type="ParameterizedTest" name="Assert-All.Fails when any item in the given collection does not pass the predicate" executed="True" result="Success" success="True" time="0.0123" asserts="0" description="Fails when any item in the given collection does not pass the predicate">
                <results>
                  <test-case description="Fails when any item in the given collection does not pass the predicate" name="Assert-All.Fails when any item in the given collection does not pass the predicate(1 1 2 1)" time="0.0049" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Fails when any item in the given collection does not pass the predicate" name="Assert-All.Fails when any item in the given collection does not pass the predicate(2)" time="0.0037" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Fails when any item in the given collection does not pass the predicate" name="Assert-All.Fails when any item in the given collection does not pass the predicate(2)" time="0.0037" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="Assert-All.Passes when all items in the given collection pass the predicate" executed="True" result="Success" success="True" time="0.0104" asserts="0" description="Passes when all items in the given collection pass the predicate">
                <results>
                  <test-case description="Passes when all items in the given collection pass the predicate" name="Assert-All.Passes when all items in the given collection pass the predicate(1 1 1 1)" time="0.0026" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Passes when all items in the given collection pass the predicate" name="Assert-All.Passes when all items in the given collection pass the predicate(1)" time="0.0054" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Passes when all items in the given collection pass the predicate" name="Assert-All.Passes when all items in the given collection pass the predicate(1)" time="0.0024" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="Assert-All.Validate messages" executed="True" result="Success" success="True" time="0.0153" asserts="0" description="Validate messages">
                <results>
                  <test-case description="Validate messages" name="Assert-All.Validate messages(3 4 5,&quot;Expected all items in collection '3, 4, 5' to pass filter '{ $_ -eq 1 }', but 3 of them '3, 4, 5' did not pass the filter.&quot;)" time="0.0153" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\p\assert\tst\Collection\Assert-Any.Tests.ps1" executed="True" result="Success" success="True" time="0.0758" asserts="0" description="C:\p\assert\tst\Collection\Assert-Any.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Assert-Any" executed="True" result="Success" success="True" time="0.0439" asserts="0" description="Assert-Any">
            <results>
              <test-case description="Returns the value on output" name="Assert-Any.Returns the value on output" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Accepts FilterScript and Actual by position" name="Assert-Any.Accepts FilterScript and Actual by position" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
              <test-suite type="ParameterizedTest" name="Assert-Any.Fails when none of the items passes the predicate" executed="True" result="Success" success="True" time="0.0147" asserts="0" description="Fails when none of the items passes the predicate">
                <results>
                  <test-case description="Fails when none of the items passes the predicate" name="Assert-Any.Fails when none of the items passes the predicate(1 2 3)" time="0.0043" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Fails when none of the items passes the predicate" name="Assert-Any.Fails when none of the items passes the predicate(1)" time="0.0034" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Fails when none of the items passes the predicate" name="Assert-Any.Fails when none of the items passes the predicate(1)" time="0.007" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="Assert-Any.Passes when at least one item in the given collection passes the predicate" executed="True" result="Success" success="True" time="0.007" asserts="0" description="Passes when at least one item in the given collection passes the predicate">
                <results>
                  <test-case description="Passes when at least one item in the given collection passes the predicate" name="Assert-Any.Passes when at least one item in the given collection passes the predicate(1 2 3)" time="0.0025" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Passes when at least one item in the given collection passes the predicate" name="Assert-Any.Passes when at least one item in the given collection passes the predicate(1)" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Passes when at least one item in the given collection passes the predicate" name="Assert-Any.Passes when at least one item in the given collection passes the predicate(1)" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="Assert-Any.Validate messages" executed="True" result="Success" success="True" time="0.0117" asserts="0" description="Validate messages">
                <results>
                  <test-case description="Validate messages" name="Assert-Any.Validate messages(3 4 5,&quot;Expected at least one item in collection '3, 4, 5' to pass filter '{ $_ -eq 1 }', but none of the items passed the filter.&quot;)" time="0.0042" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Validate messages" name="Assert-Any.Validate messages(3,&quot;Expected at least one item in collection '3' to pass filter '{ $_ -eq 1 }', but none of the items passed the filter.&quot;)" time="0.004" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Validate messages" name="Assert-Any.Validate messages(3,&quot;Expected at least one item in collection '3' to pass filter '{ $_ -eq 1 }', but none of the items passed the filter.&quot;)" time="0.0035" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\p\assert\tst\Collection\Assert-Contain.Tests.ps1" executed="True" result="Success" success="True" time="0.052" asserts="0" description="C:\p\assert\tst\Collection\Assert-Contain.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Assert-Contain" executed="True" result="Success" success="True" time="0.0231" asserts="0" description="Assert-Contain">
            <results>
              <test-case description="Passes when collection of single item contains the expected item" name="Assert-Contain.Passes when collection of single item contains the expected item" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Fails when collection of single item does not contain the expected item" name="Assert-Contain.Fails when collection of single item does not contain the expected item" time="0.0035" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Passes when collection of multiple items contains the expected item" name="Assert-Contain.Passes when collection of multiple items contains the expected item" time="0.0053" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Fails when collection of multiple items does not contain the expected item" name="Assert-Contain.Fails when collection of multiple items does not contain the expected item" time="0.0046" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Can be called with positional parameters" name="Assert-Contain.Can be called with positional parameters" time="0.004" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\p\assert\tst\Collection\Assert-NotContain.Tests.ps1" executed="True" result="Success" success="True" time="0.0529" asserts="0" description="C:\p\assert\tst\Collection\Assert-NotContain.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Assert-NotContain" executed="True" result="Success" success="True" time="0.0217" asserts="0" description="Assert-NotContain">
            <results>
              <test-case description="Fails when collection of single item contains the expected item" name="Assert-NotContain.Fails when collection of single item contains the expected item" time="0.0037" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Passes when collection of single item does not contain the expected item" name="Assert-NotContain.Passes when collection of single item does not contain the expected item" time="0.0021" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Fails when collection of multiple items contains the expected item" name="Assert-NotContain.Fails when collection of multiple items contains the expected item" time="0.0042" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Passes when collection of multiple items does not contain the expected item" name="Assert-NotContain.Passes when collection of multiple items does not contain the expected item" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Can be called with positional parameters" name="Assert-NotContain.Can be called with positional parameters" time="0.0039" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\p\assert\tst\Common\Ensure-ExpectedIsNotCollection.Tests.ps1" executed="True" result="Success" success="True" time="0.0417" asserts="0" description="C:\p\assert\tst\Common\Ensure-ExpectedIsNotCollection.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Ensure-ExpectedIsNotCollection" executed="True" result="Success" success="True" time="0.0133" asserts="0" description="Ensure-ExpectedIsNotCollection">
            <results>
              <test-case description="Given a collection it throws ArgumentException" name="Ensure-ExpectedIsNotCollection.Given a collection it throws ArgumentException" time="0.0029" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Given a collection it throws correct message" name="Ensure-ExpectedIsNotCollection.Given a collection it throws correct message" time="0.0026" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Given a value it passes it to output when it is not a collection" name="Ensure-ExpectedIsNotCollection.Given a value it passes it to output when it is not a collection" time="0.0021" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\p\assert\tst\Common\Get-AssertionMessage.Tests.ps1" executed="True" result="Success" success="True" time="0.0588" asserts="0" description="C:\p\assert\tst\Common\Get-AssertionMessage.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Get-AssertionMessage" executed="True" result="Success" success="True" time="0.0275" asserts="0" description="Get-AssertionMessage">
            <results>
              <test-case description="returns correct message when no tokens are provided" name="Get-AssertionMessage.returns correct message when no tokens are provided" time="0.0028" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="returns correct message when named tokens are provided" name="Get-AssertionMessage.returns correct message when named tokens are provided" time="0.0027" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="returns correct message when complex objects are provided" name="Get-AssertionMessage.returns correct message when complex objects are provided" time="0.0066" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="returns correct message when type tokens are provided" name="Get-AssertionMessage.returns correct message when type tokens are provided" time="0.0033" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="returns correct type message when $null is provided" name="Get-AssertionMessage.returns correct type message when $null is provided" time="0.0024" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="returns correct message when option is provided" name="Get-AssertionMessage.returns correct message when option is provided" time="0.0027" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="returns correct message when additional data are provided" name="Get-AssertionMessage.returns correct message when additional data are provided" time="0.0033" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\p\assert\tst\Equivalence\Assert-Equivalent.Options.Tests.ps1" executed="True" result="Success" success="True" time="0.2839" asserts="0" description="C:\p\assert\tst\Equivalence\Assert-Equivalent.Options.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Compare-Equivalent - Exclude path options" executed="True" result="Success" success="True" time="0.227" asserts="0" description="Compare-Equivalent - Exclude path options">
            <results>
              <test-suite type="TestFixture" name="Compare-Equivalent - Exclude path options.Full excluded paths" executed="True" result="Success" success="True" time="0.1489" asserts="0" description="Compare-Equivalent - Exclude path options.Full excluded paths">
                <results>
                  <test-case description="Given a full path to a property on object that is in collection it ignores it on the Expected object" name="Compare-Equivalent - Exclude path options.Full excluded paths.Given a full path to a property on object that is in collection it ignores it on the Expected object" time="0.0194" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given a full path to a property on object that is in collection it ignores it on the Actual object" name="Compare-Equivalent - Exclude path options.Full excluded paths.Given a full path to a property on object that is in collection it ignores it on the Actual object" time="0.0192" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given a full path to a property on object that is in hashtable it ignores it on the Expected object" name="Compare-Equivalent - Exclude path options.Full excluded paths.Given a full path to a property on object that is in hashtable it ignores it on the Expected object" time="0.0157" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given a full path to a key on a hashtable it ignores it on the Expected hashtable" name="Compare-Equivalent - Exclude path options.Full excluded paths.Given a full path to a key on a hashtable it ignores it on the Expected hashtable" time="0.0083" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given a full path to a key on a hashtable it ignores it on the Actual hashtable" name="Compare-Equivalent - Exclude path options.Full excluded paths.Given a full path to a key on a hashtable it ignores it on the Actual hashtable" time="0.006" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given a full path to a key on a dictionary it ignores it on the Expected dictionary" name="Compare-Equivalent - Exclude path options.Full excluded paths.Given a full path to a key on a dictionary it ignores it on the Expected dictionary" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given a full path to a key on a dictionary it ignores it on the Actual dictionary" name="Compare-Equivalent - Exclude path options.Full excluded paths.Given a full path to a key on a dictionary it ignores it on the Actual dictionary" time="0.0094" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given options it passes them correctly from Assert-Equivalent" name="Compare-Equivalent - Exclude path options.Full excluded paths.Given options it passes them correctly from Assert-Equivalent" time="0.0105" asserts="0" success="True" result="Success" executed="True" />
                  <test-suite type="ParameterizedTest" name="Compare-Equivalent - Exclude path options.Full excluded paths.Given a full path to a property it ignores it on the Actual object" executed="True" result="Success" success="True" time="0.0237" asserts="0" description="Given a full path to a property it ignores it on the Actual object">
                    <results>
                      <test-case description="Given a full path to a property it ignores it on the Actual object" name="Compare-Equivalent - Exclude path options.Full excluded paths.Given a full path to a property it ignores it on the Actual object(null)" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Given a full path to a property it ignores it on the Actual object" name="Compare-Equivalent - Exclude path options.Full excluded paths.Given a full path to a property it ignores it on the Actual object(&quot;ParentProperty1&quot;)" time="0.0099" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Given a full path to a property it ignores it on the Actual object" name="Compare-Equivalent - Exclude path options.Full excluded paths.Given a full path to a property it ignores it on the Actual object(&quot;ParentProperty1.ParentProperty2&quot;)" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="ParameterizedTest" name="Compare-Equivalent - Exclude path options.Full excluded paths.Given a full path to a property it ignores it on the Expected object" executed="True" result="Success" success="True" time="0.0254" asserts="0" description="Given a full path to a property it ignores it on the Expected object">
                    <results>
                      <test-case description="Given a full path to a property it ignores it on the Expected object" name="Compare-Equivalent - Exclude path options.Full excluded paths.Given a full path to a property it ignores it on the Expected object(null)" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Given a full path to a property it ignores it on the Expected object" name="Compare-Equivalent - Exclude path options.Full excluded paths.Given a full path to a property it ignores it on the Expected object(&quot;ParentProperty1&quot;)" time="0.0108" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Given a full path to a property it ignores it on the Expected object" name="Compare-Equivalent - Exclude path options.Full excluded paths.Given a full path to a property it ignores it on the Expected object(&quot;ParentProperty1.ParentProperty2&quot;)" time="0.007" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Compare-Equivalent - Exclude path options.Wildcard path exclusions" executed="True" result="Success" success="True" time="0.2005" asserts="0" description="Compare-Equivalent - Exclude path options.Wildcard path exclusions">
                <results>
                  <test-case description="Given wildcarded path it ignores it on the expected object" name="Compare-Equivalent - Exclude path options.Wildcard path exclusions.Given wildcarded path it ignores it on the expected object" time="0.0098" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given wildcarded path it ignores it on the actual object" name="Compare-Equivalent - Exclude path options.Wildcard path exclusions.Given wildcarded path it ignores it on the actual object" time="0.0068" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given wildcarded path it ignores it on the expected hashtable" name="Compare-Equivalent - Exclude path options.Wildcard path exclusions.Given wildcarded path it ignores it on the expected hashtable" time="0.0085" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given wildcarded path it ignores it on the actual hashtable" name="Compare-Equivalent - Exclude path options.Wildcard path exclusions.Given wildcarded path it ignores it on the actual hashtable" time="0.0062" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given wildcarded path it ignores it on the expected dictionary" name="Compare-Equivalent - Exclude path options.Wildcard path exclusions.Given wildcarded path it ignores it on the expected dictionary" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given wildcarded path it ignores it on the actual dictionary" name="Compare-Equivalent - Exclude path options.Wildcard path exclusions.Given wildcarded path it ignores it on the actual dictionary" time="0.0096" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Compare-Equivalent - Exclude path options.-ExcludePathsNotOnExpected" executed="True" result="Success" success="True" time="0.2239" asserts="0" description="Compare-Equivalent - Exclude path options.-ExcludePathsNotOnExpected">
                <results>
                  <test-case description="Given actual object that has more properties that expected it skips them" name="Compare-Equivalent - Exclude path options.-ExcludePathsNotOnExpected.Given actual object that has more properties that expected it skips them" time="0.006" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given actual hashtable that has more keys that expected it skips them" name="Compare-Equivalent - Exclude path options.-ExcludePathsNotOnExpected.Given actual hashtable that has more keys that expected it skips them" time="0.0052" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given actual dictionary that has more keys that expected it skips them" name="Compare-Equivalent - Exclude path options.-ExcludePathsNotOnExpected.Given actual dictionary that has more keys that expected it skips them" time="0.0089" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Compare-Equiavlent - equality comparison options" executed="True" result="Success" success="True" time="0.2393" asserts="0" description="Compare-Equiavlent - equality comparison options">
            <results>
              <test-case description="Given objects that are equivalent and -Comparator Equality option it compares them as different" name="Compare-Equiavlent - equality comparison options.Given objects that are equivalent and -Comparator Equality option it compares them as different" time="0.0093" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Printing Options into difference report" executed="True" result="Success" success="True" time="0.2493" asserts="0" description="Printing Options into difference report">
            <results>
              <test-case description="Given options that exclude property it shows up in the difference report correctly" name="Printing Options into difference report.Given options that exclude property it shows up in the difference report correctly" time="0.0024" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Given options that exclude property it shows up in the difference report correctly" name="Printing Options into difference report.Given options that exclude property it shows up in the difference report correctly" time="0.0045" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\p\assert\tst\Equivalence\Assert-Equivalent.Tests.ps1" executed="True" result="Success" success="True" time="1.2034" asserts="0" description="C:\p\assert\tst\Equivalence\Assert-Equivalent.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Test-Same" executed="True" result="Success" success="True" time="0.0195" asserts="0" description="Test-Same">
            <results>
              <test-suite type="ParameterizedTest" name="Test-Same.Given the same instance of a reference type it returns $true" executed="True" result="Success" success="True" time="0.0116" asserts="0" description="Given the same instance of a reference type it returns $true">
                <results>
                  <test-case description="Given the same instance of a reference type it returns $true" name="Test-Same.Given the same instance of a reference type it returns $true(null)" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given the same instance of a reference type it returns $true" name="Test-Same.Given the same instance of a reference type it returns $true()" time="0.0048" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given the same instance of a reference type it returns $true" name="Test-Same.Given the same instance of a reference type it returns $true(type)" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given the same instance of a reference type it returns $true" name="Test-Same.Given the same instance of a reference type it returns $true(System.Diagnostics.Process)" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="Test-Same.Given different instances of a reference type it returns $false" executed="True" result="Success" success="True" time="0.0044" asserts="0" description="Given different instances of a reference type it returns $false">
                <results>
                  <test-case description="Given different instances of a reference type it returns $false" name="Test-Same.Given different instances of a reference type it returns $false(,)" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given different instances of a reference type it returns $false" name="Test-Same.Given different instances of a reference type it returns $false(System.Diagnostics.Process,System.Diagnostics.Process)" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-TestCase" executed="True" result="Success" success="True" time="0.0291" asserts="0" description="Get-TestCase">
            <results>
              <test-case description="Given a value it returns the value and its type in a hashtable" name="Get-TestCase.Given a value it returns the value and its type in a hashtable" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Given $null it returns  as the name of the type" name="Get-TestCase.Given $null it returns  as the name of the type" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-ValueNotEquivalentMessage" executed="True" result="Success" success="True" time="0.0509" asserts="0" description="Get-ValueNotEquivalentMessage">
            <results>
              <test-case description="Returns correct message when comparing value to an object" name="Get-ValueNotEquivalentMessage.Returns correct message when comparing value to an object" time="0.0032" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Returns correct message when comparing object to a value" name="Get-ValueNotEquivalentMessage.Returns correct message when comparing object to a value" time="0.003" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Returns correct message when comparing value to an array" name="Get-ValueNotEquivalentMessage.Returns correct message when comparing value to an array" time="0.0031" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Returns correct message when comparing value to null" name="Get-ValueNotEquivalentMessage.Returns correct message when comparing value to null" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Returns correct message for given property" name="Get-ValueNotEquivalentMessage.Returns correct message for given property" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Changes wording to 'equal' when options specify Equality comparator" name="Get-ValueNotEquivalentMessage.Changes wording to 'equal' when options specify Equality comparator" time="0.0025" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Is-CollectionSize" executed="True" result="Success" success="True" time="0.0655" asserts="0" description="Is-CollectionSize">
            <results>
              <test-suite type="ParameterizedTest" name="Is-CollectionSize.Given two collections '&lt;expected&gt;' '&lt;actual&gt;' of the same size it returns $true" executed="True" result="Success" success="True" time="0.0047" asserts="0" description="Given two collections '&lt;expected&gt;' '&lt;actual&gt;' of the same size it returns $true">
                <results>
                  <test-case description="Given two collections '1 2 3' '1 2 3' of the same size it returns $true" name="Is-CollectionSize.Given two collections '1 2 3' '1 2 3' of the same size it returns $true" time="0.0024" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given two collections '3 2 1' '1 2 3' of the same size it returns $true" name="Is-CollectionSize.Given two collections '3 2 1' '1 2 3' of the same size it returns $true" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="Is-CollectionSize.Given two collections '&lt;expected&gt;' '&lt;actual&gt;' of different sizes it returns $false" executed="True" result="Success" success="True" time="0.0067" asserts="0" description="Given two collections '&lt;expected&gt;' '&lt;actual&gt;' of different sizes it returns $false">
                <results>
                  <test-case description="Given two collections '1 2 3 4' '1 2 3' of different sizes it returns $false" name="Is-CollectionSize.Given two collections '1 2 3 4' '1 2 3' of different sizes it returns $false" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given two collections '1 2' '1 2 3' of different sizes it returns $false" name="Is-CollectionSize.Given two collections '1 2' '1 2 3' of different sizes it returns $false" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given two collections '' '1 2 3' of different sizes it returns $false" name="Is-CollectionSize.Given two collections '' '1 2 3' of different sizes it returns $false" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-CollectionSizeNotTheSameMessage" executed="True" result="Success" success="True" time="0.0746" asserts="0" description="Get-CollectionSizeNotTheSameMessage">
            <results>
              <test-case description="Given two collections of differrent sizes it returns the correct message" name="Get-CollectionSizeNotTheSameMessage.Given two collections of differrent sizes it returns the correct message" time="0.006" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Compare-ValueEquivalent" executed="True" result="Success" success="True" time="0.1379" asserts="0" description="Compare-ValueEquivalent">
            <results>
              <test-case description="Given expected that is not a value it throws ArgumentException" name="Compare-ValueEquivalent.Given expected that is not a value it throws ArgumentException" time="0.0088" asserts="0" success="True" result="Success" executed="True" />
              <test-suite type="ParameterizedTest" name="Compare-ValueEquivalent.Given values '&lt;expected&gt;' and '&lt;actual&gt;' that are not equivalent it returns message '&lt;message&gt;'." executed="True" result="Success" success="True" time="0.0507" asserts="0" description="Given values '&lt;expected&gt;' and '&lt;actual&gt;' that are not equivalent it returns message '&lt;message&gt;'.">
                <results>
                  <test-case description="Given values '1' and '' that are not equivalent it returns message 'Expected '1' to be equivalent to the actual value, but got '$null'.'." name="Compare-ValueEquivalent.Given values '1' and '' that are not equivalent it returns message 'Expected '1' to be equivalent to the actual value, but got '$null'.'." time="0.0038" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given values '' and '' that are not equivalent it returns message 'Expected '' to be equivalent to the actual value, but got '$null'.'." name="Compare-ValueEquivalent.Given values '' and '' that are not equivalent it returns message 'Expected '' to be equivalent to the actual value, but got '$null'.'." time="0.0036" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given values 'False' and 'True' that are not equivalent it returns message 'Expected '$false' to be equivalent to the actual value, but got '$true'.'." name="Compare-ValueEquivalent.Given values 'False' and 'True' that are not equivalent it returns message 'Expected '$false' to be equivalent to the actual value, but got '$true'.'." time="0.0034" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given values 'False' and 'True' that are not equivalent it returns message 'Expected '$false' to be equivalent to the actual value, but got '$true'.'." name="Compare-ValueEquivalent.Given values 'False' and 'True' that are not equivalent it returns message 'Expected '$false' to be equivalent to the actual value, but got '$true'.'." time="0.0056" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given values '-1' and '1' that are not equivalent it returns message 'Expected '-1' to be equivalent to the actual value, but got '1'.'." name="Compare-ValueEquivalent.Given values '-1' and '1' that are not equivalent it returns message 'Expected '-1' to be equivalent to the actual value, but got '1'.'." time="0.0038" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given values '1.01' and '1' that are not equivalent it returns message 'Expected '1.01' to be equivalent to the actual value, but got '1'.'." name="Compare-ValueEquivalent.Given values '1.01' and '1' that are not equivalent it returns message 'Expected '1.01' to be equivalent to the actual value, but got '1'.'." time="0.0038" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given values 'a b c' and 'abc' that are not equivalent it returns message 'Expected 'a b c' to be equivalent to the actual value, but got 'abc'.'." name="Compare-ValueEquivalent.Given values 'a b c' and 'abc' that are not equivalent it returns message 'Expected 'a b c' to be equivalent to the actual value, but got 'abc'.'." time="0.0038" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given values 'abc' and 'abc bde' that are not equivalent it returns message 'Expected 'abc' to be equivalent to the actual value, but got 'abc, bde'.'." name="Compare-ValueEquivalent.Given values 'abc' and 'abc bde' that are not equivalent it returns message 'Expected 'abc' to be equivalent to the actual value, but got 'abc, bde'.'." time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given values 'abc' and 'def' that are not equivalent it returns message 'Expected 'abc' to be equivalent to the actual value, but got '{def}'.'." name="Compare-ValueEquivalent.Given values 'abc' and 'def' that are not equivalent it returns message 'Expected 'abc' to be equivalent to the actual value, but got '{def}'.'." time="0.0039" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given values 'abc' and '@{Name=Jakub}' that are not equivalent it returns message 'Expected 'abc' to be equivalent to the actual value, but got 'PSObject{Name=Jakub}'.'." name="Compare-ValueEquivalent.Given values 'abc' and '@{Name=Jakub}' that are not equivalent it returns message 'Expected 'abc' to be equivalent to the actual value, but got 'PSObject{Name=Jakub}'.'." time="0.0055" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given values 'abc' and '1 2 3' that are not equivalent it returns message 'Expected 'abc' to be equivalent to the actual value, but got '1, 2, 3'.'." name="Compare-ValueEquivalent.Given values 'abc' and '1 2 3' that are not equivalent it returns message 'Expected 'abc' to be equivalent to the actual value, but got '1, 2, 3'.'." time="0.0057" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Compare-CollectionEquivalent" executed="True" result="Success" success="True" time="0.274" asserts="0" description="Compare-CollectionEquivalent">
            <results>
              <test-case description="Given expected that is not a collection it throws ArgumentException" name="Compare-CollectionEquivalent.Given expected that is not a collection it throws ArgumentException" time="0.0052" asserts="0" success="True" result="Success" executed="True" />
              <test-suite type="ParameterizedTest" name="Compare-CollectionEquivalent.Given two collections '&lt;expected&gt;' '&lt;actual&gt;' of different sizes it returns message '&lt;message&gt;'" executed="True" result="Success" success="True" time="0.0074" asserts="0" description="Given two collections '&lt;expected&gt;' '&lt;actual&gt;' of different sizes it returns message '&lt;message&gt;'">
                <results>
                  <test-case description="Given two collections '1 2 3 4' '1 2 3' of different sizes it returns message 'Expected collection '1, 2, 3, 4' with length '4' to be the same size as the actual collection, but got '1, 2, 3' with length '3'.'" name="Compare-CollectionEquivalent.Given two collections '1 2 3 4' '1 2 3' of different sizes it returns message 'Expected collection '1, 2, 3, 4' with length '4' to be the same size as the actual collection, but got '1, 2, 3' with length '3'.'" time="0.0039" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given two collections '3 1' '1 2 3' of different sizes it returns message 'Expected collection '3, 1' with length '2' to be the same size as the actual collection, but got '1, 2, 3' with length '3'.'" name="Compare-CollectionEquivalent.Given two collections '3 1' '1 2 3' of different sizes it returns message 'Expected collection '3, 1' with length '2' to be the same size as the actual collection, but got '1, 2, 3' with length '3'.'" time="0.0035" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="Compare-CollectionEquivalent.Given collection '&lt;expected&gt;' on the expected side and non-collection '&lt;actual&gt;' on the actual side it prints the correct message '&lt;message&gt;'" executed="True" result="Success" success="True" time="0.0075" asserts="0" description="Given collection '&lt;expected&gt;' on the expected side and non-collection '&lt;actual&gt;' on the actual side it prints the correct message '&lt;message&gt;'">
                <results>
                  <test-case description="Given collection '1 2 3 4' on the expected side and non-collection '3' on the actual side it prints the correct message 'Expected collection '1, 2, 3, 4' with length '4', but got '3'.'" name="Compare-CollectionEquivalent.Given collection '1 2 3 4' on the expected side and non-collection '3' on the actual side it prints the correct message 'Expected collection '1, 2, 3, 4' with length '4', but got '3'.'" time="0.0035" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given collection '1 2 3 4' on the expected side and non-collection '@{Name=Jakub}' on the actual side it prints the correct message 'Expected collection '1, 2, 3, 4' with length '4', but got 'PSObject{Name=Jakub}'.'" name="Compare-CollectionEquivalent.Given collection '1 2 3 4' on the expected side and non-collection '@{Name=Jakub}' on the actual side it prints the correct message 'Expected collection '1, 2, 3, 4' with length '4', but got 'PSObject{Name=Jakub}'.'" time="0.0041" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="Compare-CollectionEquivalent.Given two collections '&lt;expected&gt;' '&lt;actual&gt;' it compares each value with each value and returns $null if all of them are equivalent" executed="True" result="Success" success="True" time="0.0697" asserts="0" description="Given two collections '&lt;expected&gt;' '&lt;actual&gt;' it compares each value with each value and returns $null if all of them are equivalent">
                <results>
                  <test-case description="Given two collections '1 2 3' '1 2 3' it compares each value with each value and returns $null if all of them are equivalent" name="Compare-CollectionEquivalent.Given two collections '1 2 3' '1 2 3' it compares each value with each value and returns $null if all of them are equivalent" time="0.0118" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given two collections '3 2 1' '1 2 3' it compares each value with each value and returns $null if all of them are equivalent" name="Compare-CollectionEquivalent.Given two collections '3 2 1' '1 2 3' it compares each value with each value and returns $null if all of them are equivalent" time="0.018" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given two collections ' ' ' ' it compares each value with each value and returns $null if all of them are equivalent" name="Compare-CollectionEquivalent.Given two collections ' ' ' ' it compares each value with each value and returns $null if all of them are equivalent" time="0.0041" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given two collections '  ' '  ' it compares each value with each value and returns $null if all of them are equivalent" name="Compare-CollectionEquivalent.Given two collections '  ' '  ' it compares each value with each value and returns $null if all of them are equivalent" time="0.0048" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given two collections '1 1 1 1' '1 1 1 1' it compares each value with each value and returns $null if all of them are equivalent" name="Compare-CollectionEquivalent.Given two collections '1 1 1 1' '1 1 1 1' it compares each value with each value and returns $null if all of them are equivalent" time="0.0146" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given two collections '2 1 2 1' '1 2 2 1' it compares each value with each value and returns $null if all of them are equivalent" name="Compare-CollectionEquivalent.Given two collections '2 1 2 1' '1 2 2 1' it compares each value with each value and returns $null if all of them are equivalent" time="0.0164" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="Compare-CollectionEquivalent.Given two collections '&lt;expected&gt;' '&lt;actual&gt;' it compares each value with each value and returns message '&lt;message&gt; if any of them are not equivalent" executed="True" result="Success" success="True" time="0.0425" asserts="0" description="Given two collections '&lt;expected&gt;' '&lt;actual&gt;' it compares each value with each value and returns message '&lt;message&gt; if any of them are not equivalent">
                <results>
                  <test-case description="Given two collections '4 5 6' '1 2 3' it compares each value with each value and returns message 'Expected collection '4, 5, 6' to be equivalent to '1, 2, 3' but some values were missing: '4, 5, 6'. if any of them are not equivalent" name="Compare-CollectionEquivalent.Given two collections '4 5 6' '1 2 3' it compares each value with each value and returns message 'Expected collection '4, 5, 6' to be equivalent to '1, 2, 3' but some values were missing: '4, 5, 6'. if any of them are not equivalent" time="0.0283" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given two collections '1 2 2' '1 2 3' it compares each value with each value and returns message 'Expected collection '1, 2, 2' to be equivalent to '1, 2, 3' but some values were missing: '2'. if any of them are not equivalent" name="Compare-CollectionEquivalent.Given two collections '1 2 2' '1 2 3' it compares each value with each value and returns message 'Expected collection '1, 2, 2' to be equivalent to '1, 2, 3' but some values were missing: '2'. if any of them are not equivalent" time="0.0142" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Compare-ObjectEquivalent" executed="True" result="Success" success="True" time="0.2953" asserts="0" description="Compare-ObjectEquivalent">
            <results>
              <test-suite type="ParameterizedTest" name="Compare-ObjectEquivalent.Given expected '&lt;expected&gt;' that is not an object it throws ArgumentException" executed="True" result="Success" success="True" time="0.0114" asserts="0" description="Given expected '&lt;expected&gt;' that is not an object it throws ArgumentException">
                <results>
                  <test-case description="Given expected 'a' that is not an object it throws ArgumentException" name="Compare-ObjectEquivalent.Given expected 'a' that is not an object it throws ArgumentException" time="0.003" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given expected '1' that is not an object it throws ArgumentException" name="Compare-ObjectEquivalent.Given expected '1' that is not an object it throws ArgumentException" time="0.0028" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given expected ' abc ' that is not an object it throws ArgumentException" name="Compare-ObjectEquivalent.Given expected ' abc ' that is not an object it throws ArgumentException" time="0.0028" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given expected '1 2 3' that is not an object it throws ArgumentException" name="Compare-ObjectEquivalent.Given expected '1 2 3' that is not an object it throws ArgumentException" time="0.0028" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="Compare-ObjectEquivalent.Given values '&lt;expected&gt;' and '&lt;actual&gt;' that are not equivalent it returns message '&lt;message&gt;'." executed="True" result="Success" success="True" time="0.0064" asserts="0" description="Given values '&lt;expected&gt;' and '&lt;actual&gt;' that are not equivalent it returns message '&lt;message&gt;'.">
                <results>
                  <test-case description="Given values '@{Name=Jakub}' and 'a' that are not equivalent it returns message 'Expected object 'PSObject{Name=Jakub}', but got 'a'.'." name="Compare-ObjectEquivalent.Given values '@{Name=Jakub}' and 'a' that are not equivalent it returns message 'Expected object 'PSObject{Name=Jakub}', but got 'a'.'." time="0.0064" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Compare-HashtableEquivalent" executed="True" result="Success" success="True" time="0.3241" asserts="0" description="Compare-HashtableEquivalent">
            <results>
              <test-suite type="ParameterizedTest" name="Compare-HashtableEquivalent.Given expected '&lt;expected&gt;' that is not a hashtable it throws ArgumentException" executed="True" result="Success" success="True" time="0.0029" asserts="0" description="Given expected '&lt;expected&gt;' that is not a hashtable it throws ArgumentException">
                <results>
                  <test-case description="Given expected 'a' that is not a hashtable it throws ArgumentException" name="Compare-HashtableEquivalent.Given expected 'a' that is not a hashtable it throws ArgumentException" time="0.0029" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="Compare-HashtableEquivalent.Given values '&lt;expected&gt;' and '&lt;actual&gt;' that are not equivalent it returns message '&lt;message&gt;'." executed="True" result="Success" success="True" time="0.0225" asserts="0" description="Given values '&lt;expected&gt;' and '&lt;actual&gt;' that are not equivalent it returns message '&lt;message&gt;'.">
                <results>
                  <test-case description="Given values 'System.Collections.Hashtable' and 'a' that are not equivalent it returns message 'Expected hashtable '@{Name=Jakub}', but got 'a'.'." name="Compare-HashtableEquivalent.Given values 'System.Collections.Hashtable' and 'a' that are not equivalent it returns message 'Expected hashtable '@{Name=Jakub}', but got 'a'.'." time="0.0032" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given values 'System.Collections.Hashtable' and 'System.Collections.Hashtable' that are not equivalent it returns message 'Expected hashtable '@{Name=Jakub}', but got '@{}'.&#xA;Expected has key 'Name' that the other object does not have.'." name="Compare-HashtableEquivalent.Given values 'System.Collections.Hashtable' and 'System.Collections.Hashtable' that are not equivalent it returns message 'Expected hashtable '@{Name=Jakub}', but got '@{}'.&#xA;Expected has key 'Name' that the other object does not have.'." time="0.0039" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given values 'System.Collections.Hashtable' and 'System.Collections.Hashtable' that are not equivalent it returns message 'Expected hashtable '@{Name=Jakub}', but got '@{Name=Tomas}'.&#xA;Expected property .Name with value 'Jakub' to be equivalent to the actual value, but got 'Tomas'.'." name="Compare-HashtableEquivalent.Given values 'System.Collections.Hashtable' and 'System.Collections.Hashtable' that are not equivalent it returns message 'Expected hashtable '@{Name=Jakub}', but got '@{Name=Tomas}'.&#xA;Expected property .Name with value 'Jakub' to be equivalent to the actual value, but got 'Tomas'.'." time="0.0087" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given values 'System.Collections.Hashtable' and 'System.Collections.Hashtable' that are not equivalent it returns message 'Expected hashtable '@{Name=Jakub}', but got '@{Name=Tomas; Value=10}'.&#xA;Expected property .Name with value 'Jakub' to be equivalent to the actual value, but got 'Tomas'.&#xA;Expected is missing key 'Value' that the other object has.'." name="Compare-HashtableEquivalent.Given values 'System.Collections.Hashtable' and 'System.Collections.Hashtable' that are not equivalent it returns message 'Expected hashtable '@{Name=Jakub}', but got '@{Name=Tomas; Value=10}'.&#xA;Expected property .Name with value 'Jakub' to be equivalent to the actual value, but got 'Tomas'.&#xA;Expected is missing key 'Value' that the other object has.'." time="0.0066" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Compare-DictionaryEquivalent" executed="True" result="Success" success="True" time="0.3531" asserts="0" description="Compare-DictionaryEquivalent">
            <results>
              <test-suite type="ParameterizedTest" name="Compare-DictionaryEquivalent.Given expected '&lt;expected&gt;' that is not a dictionary it throws ArgumentException" executed="True" result="Success" success="True" time="0.0029" asserts="0" description="Given expected '&lt;expected&gt;' that is not a dictionary it throws ArgumentException">
                <results>
                  <test-case description="Given expected 'a' that is not a dictionary it throws ArgumentException" name="Compare-DictionaryEquivalent.Given expected 'a' that is not a dictionary it throws ArgumentException" time="0.0029" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="Compare-DictionaryEquivalent.Given values '&lt;expected&gt;' and '&lt;actual&gt;' that are not equivalent it returns message '&lt;message&gt;'." executed="True" result="Success" success="True" time="0.0227" asserts="0" description="Given values '&lt;expected&gt;' and '&lt;actual&gt;' that are not equivalent it returns message '&lt;message&gt;'.">
                <results>
                  <test-case description="Given values 'System.Collections.Generic.Dictionary`2[System.String,System.Object]' and 'a' that are not equivalent it returns message 'Expected dictionary 'Dictionary{Name=Jakub}', but got 'a'.'." name="Compare-DictionaryEquivalent.Given values 'System.Collections.Generic.Dictionary`2[System.String,System.Object]' and 'a' that are not equivalent it returns message 'Expected dictionary 'Dictionary{Name=Jakub}', but got 'a'.'." time="0.0032" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given values 'System.Collections.Generic.Dictionary`2[System.String,System.Object]' and 'System.Collections.Generic.Dictionary`2[System.String,System.Object]' that are not equivalent it returns message 'Expected dictionary 'Dictionary{Name=Jakub}', but got 'Dictionary{}'.&#xA;Expected has key 'Name' that the other object does not have.'." name="Compare-DictionaryEquivalent.Given values 'System.Collections.Generic.Dictionary`2[System.String,System.Object]' and 'System.Collections.Generic.Dictionary`2[System.String,System.Object]' that are not equivalent it returns message 'Expected dictionary 'Dictionary{Name=Jakub}', but got 'Dictionary{}'.&#xA;Expected has key 'Name' that the other object does not have.'." time="0.0068" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given values 'System.Collections.Generic.Dictionary`2[System.String,System.Object]' and 'System.Collections.Generic.Dictionary`2[System.String,System.Object]' that are not equivalent it returns message 'Expected dictionary 'Dictionary{Name=Jakub}', but got 'Dictionary{Name=Tomas}'.&#xA;Expected property .Name with value 'Jakub' to be equivalent to the actual value, but got 'Tomas'.'." name="Compare-DictionaryEquivalent.Given values 'System.Collections.Generic.Dictionary`2[System.String,System.Object]' and 'System.Collections.Generic.Dictionary`2[System.String,System.Object]' that are not equivalent it returns message 'Expected dictionary 'Dictionary{Name=Jakub}', but got 'Dictionary{Name=Tomas}'.&#xA;Expected property .Name with value 'Jakub' to be equivalent to the actual value, but got 'Tomas'.'." time="0.0062" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given values 'System.Collections.Generic.Dictionary`2[System.String,System.Object]' and 'System.Collections.Generic.Dictionary`2[System.String,System.Object]' that are not equivalent it returns message 'Expected dictionary 'Dictionary{Name=Jakub}', but got 'Dictionary{Name=Tomas; Value=10}'.&#xA;Expected property .Name with value 'Jakub' to be equivalent to the actual value, but got 'Tomas'.&#xA;Expected is missing key 'Value' that the other object has.'." name="Compare-DictionaryEquivalent.Given values 'System.Collections.Generic.Dictionary`2[System.String,System.Object]' and 'System.Collections.Generic.Dictionary`2[System.String,System.Object]' that are not equivalent it returns message 'Expected dictionary 'Dictionary{Name=Jakub}', but got 'Dictionary{Name=Tomas; Value=10}'.&#xA;Expected property .Name with value 'Jakub' to be equivalent to the actual value, but got 'Tomas'.&#xA;Expected is missing key 'Value' that the other object has.'." time="0.0065" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Compare-Equivalent" executed="True" result="Success" success="True" time="1.1475" asserts="0" description="Compare-Equivalent">
            <results>
              <test-case description="Comparing the same instance of a psObject returns null" name="Compare-Equivalent.Comparing the same instance of a psObject returns null" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Comparing DataTable" name="Compare-Equivalent.Comparing DataTable" time="0.4655" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Can be called with positional parameters" name="Compare-Equivalent.Can be called with positional parameters" time="0.0085" asserts="0" success="True" result="Success" executed="True" />
              <test-suite type="ParameterizedTest" name="Compare-Equivalent.Given values '&lt;expected&gt;' and '&lt;actual&gt;' that are equivalent returns report with Equivalent set to $true" executed="True" result="Success" success="True" time="0.0721" asserts="0" description="Given values '&lt;expected&gt;' and '&lt;actual&gt;' that are equivalent returns report with Equivalent set to $true">
                <results>
                  <test-case description="Given values '' and '' that are equivalent returns report with Equivalent set to $true" name="Compare-Equivalent.Given values '' and '' that are equivalent returns report with Equivalent set to $true" time="0.0063" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given values '' and '' that are equivalent returns report with Equivalent set to $true" name="Compare-Equivalent.Given values '' and '' that are equivalent returns report with Equivalent set to $true" time="0.0047" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given values 'True' and 'True' that are equivalent returns report with Equivalent set to $true" name="Compare-Equivalent.Given values 'True' and 'True' that are equivalent returns report with Equivalent set to $true" time="0.0043" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given values 'True' and 'True' that are equivalent returns report with Equivalent set to $true" name="Compare-Equivalent.Given values 'True' and 'True' that are equivalent returns report with Equivalent set to $true" time="0.0045" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given values 'True' and 'True' that are equivalent returns report with Equivalent set to $true" name="Compare-Equivalent.Given values 'True' and 'True' that are equivalent returns report with Equivalent set to $true" time="0.0043" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given values 'False' and 'False' that are equivalent returns report with Equivalent set to $true" name="Compare-Equivalent.Given values 'False' and 'False' that are equivalent returns report with Equivalent set to $true" time="0.0067" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given values 'False' and 'False' that are equivalent returns report with Equivalent set to $true" name="Compare-Equivalent.Given values 'False' and 'False' that are equivalent returns report with Equivalent set to $true" time="0.0039" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given values '1' and '1' that are equivalent returns report with Equivalent set to $true" name="Compare-Equivalent.Given values '1' and '1' that are equivalent returns report with Equivalent set to $true" time="0.0045" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given values '1' and '1' that are equivalent returns report with Equivalent set to $true" name="Compare-Equivalent.Given values '1' and '1' that are equivalent returns report with Equivalent set to $true" time="0.0045" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given values 'abc' and 'abc' that are equivalent returns report with Equivalent set to $true" name="Compare-Equivalent.Given values 'abc' and 'abc' that are equivalent returns report with Equivalent set to $true" time="0.0044" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given values 'abc' and 'abc' that are equivalent returns report with Equivalent set to $true" name="Compare-Equivalent.Given values 'abc' and 'abc' that are equivalent returns report with Equivalent set to $true" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given values 'abc' and 'abc' that are equivalent returns report with Equivalent set to $true" name="Compare-Equivalent.Given values 'abc' and 'abc' that are equivalent returns report with Equivalent set to $true" time="0.0046" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given values 'abc' and 'abc' that are equivalent returns report with Equivalent set to $true" name="Compare-Equivalent.Given values 'abc' and 'abc' that are equivalent returns report with Equivalent set to $true" time="0.0044" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given values 'abc' and 'abc' that are equivalent returns report with Equivalent set to $true" name="Compare-Equivalent.Given values 'abc' and 'abc' that are equivalent returns report with Equivalent set to $true" time="0.0036" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given values 'abc' and 'abc' that are equivalent returns report with Equivalent set to $true" name="Compare-Equivalent.Given values 'abc' and 'abc' that are equivalent returns report with Equivalent set to $true" time="0.0037" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="Compare-Equivalent.Given values '&lt;expected&gt;' and '&lt;actual&gt;' that are not equivalent it returns message '&lt;message&gt;'." executed="True" result="Success" success="True" time="0.0986" asserts="0" description="Given values '&lt;expected&gt;' and '&lt;actual&gt;' that are not equivalent it returns message '&lt;message&gt;'.">
                <results>
                  <test-case description="Given values '1' and '' that are not equivalent it returns message 'Expected '1' to be equivalent to the actual value, but got '$null'.'." name="Compare-Equivalent.Given values '1' and '' that are not equivalent it returns message 'Expected '1' to be equivalent to the actual value, but got '$null'.'." time="0.0066" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given values '' and '' that are not equivalent it returns message 'Expected '' to be equivalent to the actual value, but got '$null'.'." name="Compare-Equivalent.Given values '' and '' that are not equivalent it returns message 'Expected '' to be equivalent to the actual value, but got '$null'.'." time="0.0034" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given values 'False' and 'True' that are not equivalent it returns message 'Expected '$false' to be equivalent to the actual value, but got '$true'.'." name="Compare-Equivalent.Given values 'False' and 'True' that are not equivalent it returns message 'Expected '$false' to be equivalent to the actual value, but got '$true'.'." time="0.0045" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given values 'False' and 'True' that are not equivalent it returns message 'Expected '$false' to be equivalent to the actual value, but got '$true'.'." name="Compare-Equivalent.Given values 'False' and 'True' that are not equivalent it returns message 'Expected '$false' to be equivalent to the actual value, but got '$true'.'." time="0.0041" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given values '-1' and '1' that are not equivalent it returns message 'Expected '-1' to be equivalent to the actual value, but got '1'.'." name="Compare-Equivalent.Given values '-1' and '1' that are not equivalent it returns message 'Expected '-1' to be equivalent to the actual value, but got '1'.'." time="0.0047" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given values '1.01' and '1' that are not equivalent it returns message 'Expected '1.01' to be equivalent to the actual value, but got '1'.'." name="Compare-Equivalent.Given values '1.01' and '1' that are not equivalent it returns message 'Expected '1.01' to be equivalent to the actual value, but got '1'.'." time="0.0082" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given values 'a b c' and 'abc' that are not equivalent it returns message 'Expected 'a b c' to be equivalent to the actual value, but got 'abc'.'." name="Compare-Equivalent.Given values 'a b c' and 'abc' that are not equivalent it returns message 'Expected 'a b c' to be equivalent to the actual value, but got 'abc'.'." time="0.005" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given values 'abc' and 'abc bde' that are not equivalent it returns message 'Expected 'abc' to be equivalent to the actual value, but got 'abc, bde'.'." name="Compare-Equivalent.Given values 'abc' and 'abc bde' that are not equivalent it returns message 'Expected 'abc' to be equivalent to the actual value, but got 'abc, bde'.'." time="0.0062" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given values 'abc' and 'def' that are not equivalent it returns message 'Expected 'abc' to be equivalent to the actual value, but got '{def}'.'." name="Compare-Equivalent.Given values 'abc' and 'def' that are not equivalent it returns message 'Expected 'abc' to be equivalent to the actual value, but got '{def}'.'." time="0.0048" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given values 'abc' and 'def' that are not equivalent it returns message 'Expected '{abc}' to be equivalent to the actual value, but got 'def'.'." name="Compare-Equivalent.Given values 'abc' and 'def' that are not equivalent it returns message 'Expected '{abc}' to be equivalent to the actual value, but got 'def'.'." time="0.0072" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given values 'def' and 'abc' that are not equivalent it returns message 'Expected '{def}' to be equivalent to the actual value, but got '{abc}'.'." name="Compare-Equivalent.Given values 'def' and 'abc' that are not equivalent it returns message 'Expected '{def}' to be equivalent to the actual value, but got '{abc}'.'." time="0.004" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given values '1 2 3 4' and '1 2 3' that are not equivalent it returns message 'Expected collection '1, 2, 3, 4' with length '4' to be the same size as the actual collection, but got '1, 2, 3' with length '3'.'." name="Compare-Equivalent.Given values '1 2 3 4' and '1 2 3' that are not equivalent it returns message 'Expected collection '1, 2, 3, 4' with length '4' to be the same size as the actual collection, but got '1, 2, 3' with length '3'.'." time="0.0051" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given values '1 2 3 4' and '3' that are not equivalent it returns message 'Expected collection '1, 2, 3, 4' with length '4', but got '3'.'." name="Compare-Equivalent.Given values '1 2 3 4' and '3' that are not equivalent it returns message 'Expected collection '1, 2, 3, 4' with length '4', but got '3'.'." time="0.0047" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given values '1 2 3 4' and '@{Name=Jakub}' that are not equivalent it returns message 'Expected collection '1, 2, 3, 4' with length '4', but got 'PSObject{Name=Jakub}'.'." name="Compare-Equivalent.Given values '1 2 3 4' and '@{Name=Jakub}' that are not equivalent it returns message 'Expected collection '1, 2, 3, 4' with length '4', but got 'PSObject{Name=Jakub}'.'." time="0.0095" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given values 'a' and '@{Name=Jakub}' that are not equivalent it returns message 'Expected 'a' to be equivalent to the actual value, but got 'PSObject{Name=Jakub}'.'." name="Compare-Equivalent.Given values 'a' and '@{Name=Jakub}' that are not equivalent it returns message 'Expected 'a' to be equivalent to the actual value, but got 'PSObject{Name=Jakub}'.'." time="0.007" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given values '@{Name=Jakub}' and 'a' that are not equivalent it returns message 'Expected object 'PSObject{Name=Jakub}', but got 'a'.'." name="Compare-Equivalent.Given values '@{Name=Jakub}' and 'a' that are not equivalent it returns message 'Expected object 'PSObject{Name=Jakub}', but got 'a'.'." time="0.0047" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given values 'System.Collections.Hashtable' and 'a' that are not equivalent it returns message 'Expected hashtable '@{Name=Jakub}', but got 'a'.'." name="Compare-Equivalent.Given values 'System.Collections.Hashtable' and 'a' that are not equivalent it returns message 'Expected hashtable '@{Name=Jakub}', but got 'a'.'." time="0.0041" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given values 'System.Collections.Generic.Dictionary`2[System.String,System.Object]' and 'a' that are not equivalent it returns message 'Expected dictionary 'Dictionary{Name=Jakub}', but got 'a'.'." name="Compare-Equivalent.Given values 'System.Collections.Generic.Dictionary`2[System.String,System.Object]' and 'a' that are not equivalent it returns message 'Expected dictionary 'Dictionary{Name=Jakub}', but got 'a'.'." time="0.0048" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="Compare-Equivalent.Given PSObjects '&lt;expected&gt;' and '&lt;actual&gt; that are different instances but have the same values it returns report with Equivalent set to $true" executed="True" result="Success" success="True" time="0.0244" asserts="0" description="Given PSObjects '&lt;expected&gt;' and '&lt;actual&gt; that are different instances but have the same values it returns report with Equivalent set to $true">
                <results>
                  <test-case description="Given PSObjects '@{Name=Jakub}' and '@{Name=Jakub} that are different instances but have the same values it returns report with Equivalent set to $true" name="Compare-Equivalent.Given PSObjects '@{Name=Jakub}' and '@{Name=Jakub} that are different instances but have the same values it returns report with Equivalent set to $true" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given PSObjects '@{Name=Jakub}' and '@{Name=Jakub} that are different instances but have the same values it returns report with Equivalent set to $true" name="Compare-Equivalent.Given PSObjects '@{Name=Jakub}' and '@{Name=Jakub} that are different instances but have the same values it returns report with Equivalent set to $true" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given PSObjects '@{Age=28}' and '@{Age=28} that are different instances but have the same values it returns report with Equivalent set to $true" name="Compare-Equivalent.Given PSObjects '@{Age=28}' and '@{Age=28} that are different instances but have the same values it returns report with Equivalent set to $true" time="0.0102" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="Compare-Equivalent.Given PSObjects '&lt;expected&gt;' and '&lt;actual&gt; that have different values in some of the properties it returns message '&lt;message&gt;'" executed="True" result="Success" success="True" time="0.0277" asserts="0" description="Given PSObjects '&lt;expected&gt;' and '&lt;actual&gt; that have different values in some of the properties it returns message '&lt;message&gt;'">
                <results>
                  <test-case description="Given PSObjects '@{Name=Jakub; Age=28}' and '@{Name=Jakub; Age=19} that have different values in some of the properties it returns message 'Expected property .Age with value '28' to be equivalent to the actual value, but got '19'.'" name="Compare-Equivalent.Given PSObjects '@{Name=Jakub; Age=28}' and '@{Name=Jakub; Age=19} that have different values in some of the properties it returns message 'Expected property .Age with value '28' to be equivalent to the actual value, but got '19'.'" time="0.0097" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given PSObjects '@{Name=Jakub; Age=28}' and '@{Name=Jakub} that have different values in some of the properties it returns message 'Expected has property 'Age' that the other object does not have.'" name="Compare-Equivalent.Given PSObjects '@{Name=Jakub; Age=28}' and '@{Name=Jakub} that have different values in some of the properties it returns message 'Expected has property 'Age' that the other object does not have.'" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given PSObjects '@{Name=Jakub}' and '@{Name=Jakub; Age=28} that have different values in some of the properties it returns message 'Expected is missing property 'Age' that the other object has.'" name="Compare-Equivalent.Given PSObjects '@{Name=Jakub}' and '@{Name=Jakub; Age=28} that have different values in some of the properties it returns message 'Expected is missing property 'Age' that the other object has.'" time="0.0106" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="Compare-Equivalent.Given PSObject '&lt;expected&gt;' and object '&lt;actual&gt; that have the same values it returns $null" executed="True" result="Success" success="True" time="0.0099" asserts="0" description="Given PSObject '&lt;expected&gt;' and object '&lt;actual&gt; that have the same values it returns $null">
                <results>
                  <test-case description="Given PSObject 'Assertions.TestType.Person2' and object '@{Name=Jakub; Age=28} that have the same values it returns $null" name="Compare-Equivalent.Given PSObject 'Assertions.TestType.Person2' and object '@{Name=Jakub; Age=28} that have the same values it returns $null" time="0.0099" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="Compare-Equivalent.Given PSObjects '&lt;expected&gt;' and '&lt;actual&gt; that contain different arrays in the same property returns the correct message" executed="True" result="Success" success="True" time="0.03" asserts="0" description="Given PSObjects '&lt;expected&gt;' and '&lt;actual&gt; that contain different arrays in the same property returns the correct message">
                <results>
                  <test-case description="Given PSObjects '@{Numbers=System.Object[]}' and '@{Numbers=System.Object[]} that contain different arrays in the same property returns the correct message" name="Compare-Equivalent.Given PSObjects '@{Numbers=System.Object[]}' and '@{Numbers=System.Object[]} that contain different arrays in the same property returns the correct message" time="0.03" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="Compare-Equivalent.Comparing psObjects that have collections of objects returns $null when the objects have the same value" executed="True" result="Success" success="True" time="0.0228" asserts="0" description="Comparing psObjects that have collections of objects returns $null when the objects have the same value">
                <results>
                  <test-case description="Comparing psObjects that have collections of objects returns $null when the objects have the same value" name="Compare-Equivalent.Comparing psObjects that have collections of objects returns $null when the objects have the same value(@{Objects=System.Object[]},@{Objects=System.Object[]})" time="0.0228" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="Compare-Equivalent.Comparing psObjects that have collections of objects returns the correct message when the items in the collection differ" executed="True" result="Success" success="True" time="0.0223" asserts="0" description="Comparing psObjects that have collections of objects returns the correct message when the items in the collection differ">
                <results>
                  <test-case description="Comparing psObjects that have collections of objects returns the correct message when the items in the collection differ" name="Compare-Equivalent.Comparing psObjects that have collections of objects returns the correct message when the items in the collection differ(@{Objects=System.Object[]},@{Objects=System.Object[]})" time="0.0223" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\p\assert\tst\Exception\Assert-Throw.Tests.ps1" executed="True" result="Success" success="True" time="0.2192" asserts="0" description="C:\p\assert\tst\Exception\Assert-Throw.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Assert-Throw" executed="True" result="Success" success="True" time="0.1575" asserts="0" description="Assert-Throw">
            <results>
              <test-suite type="TestFixture" name="Assert-Throw.Filtering with exception type" executed="True" result="Success" success="True" time="0.0321" asserts="0" description="Assert-Throw.Filtering with exception type">
                <results>
                  <test-case description="Passes when exception has the expected type" name="Assert-Throw.Filtering with exception type.Passes when exception has the expected type" time="0.0033" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Passes when exception has type that inherits from the expected type" name="Assert-Throw.Filtering with exception type.Passes when exception has type that inherits from the expected type" time="0.0064" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Fails when exception is thrown, but is not the expected type nor iheriting form the expected type" name="Assert-Throw.Filtering with exception type.Fails when exception is thrown, but is not the expected type nor iheriting form the expected type" time="0.0046" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Assert-Throw.Filtering with exception message" executed="True" result="Success" success="True" time="0.0531" asserts="0" description="Assert-Throw.Filtering with exception message">
                <results>
                  <test-case description="Passes when exception has the expected message" name="Assert-Throw.Filtering with exception message.Passes when exception has the expected message" time="0.0031" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Fails when exception does not have the expected message" name="Assert-Throw.Filtering with exception message.Fails when exception does not have the expected message" time="0.0042" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Passes when exception has message that matches based on wildcards" name="Assert-Throw.Filtering with exception message.Passes when exception has message that matches based on wildcards" time="0.0059" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Fails when exception does not match the message with wildcard" name="Assert-Throw.Filtering with exception message.Fails when exception does not match the message with wildcard" time="0.0045" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Assert-Throw.Filtering with FullyQualifiedErrorId" executed="True" result="Success" success="True" time="0.0739" asserts="0" description="Assert-Throw.Filtering with FullyQualifiedErrorId">
                <results>
                  <test-case description="Passes when exception has the FullyQualifiedErrorId" name="Assert-Throw.Filtering with FullyQualifiedErrorId.Passes when exception has the FullyQualifiedErrorId" time="0.0031" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Fails when exception does not have the FullyQualifiedErrorId" name="Assert-Throw.Filtering with FullyQualifiedErrorId.Fails when exception does not have the FullyQualifiedErrorId" time="0.0043" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Passes when exception has FullyQualifiedErrorId that matches based on wildcards" name="Assert-Throw.Filtering with FullyQualifiedErrorId.Passes when exception has FullyQualifiedErrorId that matches based on wildcards" time="0.0031" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Fails when exception does not match the FullyQualifiedErrorId with wildcard" name="Assert-Throw.Filtering with FullyQualifiedErrorId.Fails when exception does not match the FullyQualifiedErrorId with wildcard" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Assert-Throw.Verify messages" executed="True" result="Success" success="True" time="0.1179" asserts="0" description="Assert-Throw.Verify messages">
                <results>
                  <test-case description="Given no exception it returns the correct message" name="Assert-Throw.Verify messages.Given no exception it returns the correct message" time="0.0037" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given exception that does not match on type it returns the correct message" name="Assert-Throw.Verify messages.Given exception that does not match on type it returns the correct message" time="0.0045" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given exception that does not match on message it returns the correct message" name="Assert-Throw.Verify messages.Given exception that does not match on message it returns the correct message" time="0.0043" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given exception that does not match on FullyQualifiedErrorId it returns the correct message" name="Assert-Throw.Verify messages.Given exception that does not match on FullyQualifiedErrorId it returns the correct message" time="0.007" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given exception that does not match on type and message it returns the correct message" name="Assert-Throw.Verify messages.Given exception that does not match on type and message it returns the correct message" time="0.0045" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given exception that does not match on type and FullyQualifiedErrorId it returns the correct message" name="Assert-Throw.Verify messages.Given exception that does not match on type and FullyQualifiedErrorId it returns the correct message" time="0.0045" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given exception that does not match on message and FullyQualifiedErrorId it returns the correct message" name="Assert-Throw.Verify messages.Given exception that does not match on message and FullyQualifiedErrorId it returns the correct message" time="0.0043" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given exception that does not match on type, message and FullyQualifiedErrorId it returns the correct message" name="Assert-Throw.Verify messages.Given exception that does not match on type, message and FullyQualifiedErrorId it returns the correct message" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Assert-Throw.Unwrapping exception from different sources" executed="True" result="Success" success="True" time="0.1486" asserts="0" description="Assert-Throw.Unwrapping exception from different sources">
                <results>
                  <test-case description="Exception is thrown by throw keyword" name="Assert-Throw.Unwrapping exception from different sources.Exception is thrown by throw keyword" time="0.0033" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Exception is thrown by static .net method" name="Assert-Throw.Unwrapping exception from different sources.Exception is thrown by static .net method" time="0.0034" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Exception is thrown by failed constructor" name="Assert-Throw.Unwrapping exception from different sources.Exception is thrown by failed constructor" time="0.0039" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Exception is thrown by division by zero" name="Assert-Throw.Unwrapping exception from different sources.Exception is thrown by division by zero" time="0.0031" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Terminating error is thrown by cmdlet failing to bind paramaters" name="Assert-Throw.Unwrapping exception from different sources.Terminating error is thrown by cmdlet failing to bind paramaters" time="0.0065" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Terminating error is thrown by cmdlet with -ErrorAction Stop" name="Assert-Throw.Unwrapping exception from different sources.Terminating error is thrown by cmdlet with -ErrorAction Stop" time="0.0036" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Non-terminating error is thrown by cmdlet and converted to terminating error by the assertion" name="Assert-Throw.Unwrapping exception from different sources.Non-terminating error is thrown by cmdlet and converted to terminating error by the assertion" time="0.0034" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-case description="Passes when exception is thrown" name="Assert-Throw.Passes when exception is thrown" time="0.0034" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Fails when no exception is thrown" name="Assert-Throw.Fails when no exception is thrown" time="0.0037" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Passes when non-terminating exception is thrown" name="Assert-Throw.Passes when non-terminating exception is thrown" time="0.0033" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Fails when non-terminating exception is thrown and -AllowNonTerminatingError switch is specified" name="Assert-Throw.Fails when non-terminating exception is thrown and -AllowNonTerminatingError switch is specified" time="0.0037" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Given scriptblock that throws it returns ErrorRecord to the output" name="Assert-Throw.Given scriptblock that throws it returns ErrorRecord to the output" time="0.0035" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="General try catch behavior" executed="True" result="Success" success="True" time="0.1735" asserts="0" description="General try catch behavior">
            <results>
              <test-case description="Gets error record when exception is thrown by throw keyword" name="General try catch behavior.Gets error record when exception is thrown by throw keyword" time="0.0025" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Gets error record when exception is thrown from .net" name="General try catch behavior.Gets error record when exception is thrown from .net" time="0.005" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Gets error record when non-terminating error is translated to terminating error" name="General try catch behavior.Gets error record when non-terminating error is translated to terminating error" time="0.0027" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Gets error record when non-terminating error is translated to terminating error" name="General try catch behavior.Gets error record when non-terminating error is translated to terminating error" time="0.0027" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-Error" executed="True" result="Success" success="True" time="0.18" asserts="0" description="Get-Error">
            <results>
              <test-case description="Unwraps error from invoke with context" name="Get-Error.Unwraps error from invoke with context" time="0.0035" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\p\assert\tst\General\Assert-Equal.Tests.ps1" executed="True" result="Success" success="True" time="0.1252" asserts="0" description="C:\p\assert\tst\General\Assert-Equal.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Assert-Equal" executed="True" result="Success" success="True" time="0.09" asserts="0" description="Assert-Equal">
            <results>
              <test-suite type="TestFixture" name="Assert-Equal.Comparing strings" executed="True" result="Success" success="True" time="0.0092" asserts="0" description="Assert-Equal.Comparing strings">
                <results>
                  <test-case description="Passes when two strings are equal" name="Assert-Equal.Comparing strings.Passes when two strings are equal" time="0.0024" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Fails when two strings are different" name="Assert-Equal.Comparing strings.Fails when two strings are different" time="0.0036" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Assert-Equal.Comparing integers" executed="True" result="Success" success="True" time="0.0213" asserts="0" description="Assert-Equal.Comparing integers">
                <results>
                  <test-case description="Passes when two numbers are equal" name="Assert-Equal.Comparing integers.Passes when two numbers are equal" time="0.0053" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Fails when two numbers are different" name="Assert-Equal.Comparing integers.Fails when two numbers are different" time="0.0036" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Assert-Equal.Comparing doubles" executed="True" result="Success" success="True" time="0.0299" asserts="0" description="Assert-Equal.Comparing doubles">
                <results>
                  <test-case description="Passes when two numbers are equal" name="Assert-Equal.Comparing doubles.Passes when two numbers are equal" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Fails when two numbers are different" name="Assert-Equal.Comparing doubles.Fails when two numbers are different" time="0.0033" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Assert-Equal.Comparing decimals" executed="True" result="Success" success="True" time="0.0413" asserts="0" description="Assert-Equal.Comparing decimals">
                <results>
                  <test-case description="Passes when two numbers are equal" name="Assert-Equal.Comparing decimals.Passes when two numbers are equal" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Fails when two numbers are different" name="Assert-Equal.Comparing decimals.Fails when two numbers are different" time="0.0035" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Assert-Equal.Comparing objects" executed="True" result="Success" success="True" time="0.0512" asserts="0" description="Assert-Equal.Comparing objects">
                <results>
                  <test-case description="Passes when two objects are the same" name="Assert-Equal.Comparing objects.Passes when two objects are the same" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Fails when two objects are different" name="Assert-Equal.Comparing objects.Fails when two objects are different" time="0.0046" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Assert-Equal.Validate messages" executed="True" result="Success" success="True" time="0.076" asserts="0" description="Assert-Equal.Validate messages">
                <results>
                  <test-suite type="ParameterizedTest" name="Assert-Equal.Validate messages.Given two values that are not the same '&lt;expected&gt;' and '&lt;actual&gt;' it returns expected message '&lt;message&gt;'" executed="True" result="Success" success="True" time="0.011" asserts="0" description="Given two values that are not the same '&lt;expected&gt;' and '&lt;actual&gt;' it returns expected message '&lt;message&gt;'">
                    <results>
                      <test-case description="Given two values that are not the same 'a' and '10' it returns expected message 'Expected string 'a', but got int '10'.'" name="Assert-Equal.Validate messages.Given two values that are not the same 'a' and '10' it returns expected message 'Expected string 'a', but got int '10'.'" time="0.0037" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Given two values that are not the same 'a' and '10.1' it returns expected message 'Expected string 'a', but got double '10.1'.'" name="Assert-Equal.Validate messages.Given two values that are not the same 'a' and '10.1' it returns expected message 'Expected string 'a', but got double '10.1'.'" time="0.0036" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Given two values that are not the same 'a' and '10.1' it returns expected message 'Expected string 'a', but got decimal '10.1'.'" name="Assert-Equal.Validate messages.Given two values that are not the same 'a' and '10.1' it returns expected message 'Expected string 'a', but got decimal '10.1'.'" time="0.0036" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-case description="Fails for array input even if the last item is the same as expected" name="Assert-Equal.Fails for array input even if the last item is the same as expected" time="0.004" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Fails with custom message" name="Assert-Equal.Fails with custom message" time="0.0063" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Returns the value on output" name="Assert-Equal.Returns the value on output" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Can be called with positional parameters" name="Assert-Equal.Can be called with positional parameters" time="0.0055" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Given collection to Expected it throws" name="Assert-Equal.Given collection to Expected it throws" time="0.003" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\p\assert\tst\General\Assert-GreaterThan.Tests.ps1" executed="True" result="Success" success="True" time="0.1438" asserts="0" description="C:\p\assert\tst\General\Assert-GreaterThan.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Assert-GreaterThan" executed="True" result="Success" success="True" time="0.1078" asserts="0" description="Assert-GreaterThan">
            <results>
              <test-suite type="TestFixture" name="Assert-GreaterThan.Comparing strings" executed="True" result="Success" success="True" time="0.014" asserts="0" description="Assert-GreaterThan.Comparing strings">
                <results>
                  <test-case description="Passes when actual is greater than expected" name="Assert-GreaterThan.Comparing strings.Passes when actual is greater than expected" time="0.0032" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Fails when actual is equal to expected" name="Assert-GreaterThan.Comparing strings.Fails when actual is equal to expected" time="0.0035" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Fails when actual is lower than expected" name="Assert-GreaterThan.Comparing strings.Fails when actual is lower than expected" time="0.0033" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Assert-GreaterThan.Comparing integers" executed="True" result="Success" success="True" time="0.0299" asserts="0" description="Assert-GreaterThan.Comparing integers">
                <results>
                  <test-case description="Passes when expected is greater than actual" name="Assert-GreaterThan.Comparing integers.Passes when expected is greater than actual" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Fails when actual is equal to expected" name="Assert-GreaterThan.Comparing integers.Fails when actual is equal to expected" time="0.0061" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Fails when actual is lower than expected" name="Assert-GreaterThan.Comparing integers.Fails when actual is lower than expected" time="0.0035" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Assert-GreaterThan.Comparing doubles" executed="True" result="Success" success="True" time="0.0424" asserts="0" description="Assert-GreaterThan.Comparing doubles">
                <results>
                  <test-case description="Passes when expected is greater than actual" name="Assert-GreaterThan.Comparing doubles.Passes when expected is greater than actual" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Fails when actual is equal to expected" name="Assert-GreaterThan.Comparing doubles.Fails when actual is equal to expected" time="0.0035" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Fails when actual is lower than expected" name="Assert-GreaterThan.Comparing doubles.Fails when actual is lower than expected" time="0.0033" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Assert-GreaterThan.Comparing decimals" executed="True" result="Success" success="True" time="0.0573" asserts="0" description="Assert-GreaterThan.Comparing decimals">
                <results>
                  <test-case description="Passes when expected is greater than actual" name="Assert-GreaterThan.Comparing decimals.Passes when expected is greater than actual" time="0.0049" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Fails when actual is equal to expected" name="Assert-GreaterThan.Comparing decimals.Fails when actual is equal to expected" time="0.0034" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Fails when actual is lower than expected" name="Assert-GreaterThan.Comparing decimals.Fails when actual is lower than expected" time="0.0033" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Assert-GreaterThan.Comparing objects" executed="True" result="Success" success="True" time="0.0702" asserts="0" description="Assert-GreaterThan.Comparing objects">
                <results>
                  <test-case description="Fails when two objects are the same" name="Assert-GreaterThan.Comparing objects.Fails when two objects are the same" time="0.0046" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Fails when two objects are not comparable" name="Assert-GreaterThan.Comparing objects.Fails when two objects are not comparable" time="0.0031" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Assert-GreaterThan.Validate messages" executed="True" result="Success" success="True" time="0.0932" asserts="0" description="Assert-GreaterThan.Validate messages">
                <results>
                  <test-suite type="ParameterizedTest" name="Assert-GreaterThan.Validate messages.Given two values '&lt;expected&gt;' and '&lt;actual&gt;' it returns expected message '&lt;message&gt;'" executed="True" result="Success" success="True" time="0.0133" asserts="0" description="Given two values '&lt;expected&gt;' and '&lt;actual&gt;' it returns expected message '&lt;message&gt;'">
                    <results>
                      <test-case description="Given two values 'z' and 'a' it returns expected message 'Expected string 'a' to be greater than string 'z', but it was not.'" name="Assert-GreaterThan.Validate messages.Given two values 'z' and 'a' it returns expected message 'Expected string 'a' to be greater than string 'z', but it was not.'" time="0.0037" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Given two values '10.1' and '1.1' it returns expected message 'Expected double '1.1' to be greater than double '10.1', but it was not.'" name="Assert-GreaterThan.Validate messages.Given two values '10.1' and '1.1' it returns expected message 'Expected double '1.1' to be greater than double '10.1', but it was not.'" time="0.0035" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Given two values '10.1' and '1.1' it returns expected message 'Expected decimal '1.1' to be greater than decimal '10.1', but it was not.'" name="Assert-GreaterThan.Validate messages.Given two values '10.1' and '1.1' it returns expected message 'Expected decimal '1.1' to be greater than decimal '10.1', but it was not.'" time="0.0062" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-case description="Fails for array input even if the last item is greater than then expected value" name="Assert-GreaterThan.Fails for array input even if the last item is greater than then expected value" time="0.0029" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Fails with custom message" name="Assert-GreaterThan.Fails with custom message" time="0.0034" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Returns the value on output" name="Assert-GreaterThan.Returns the value on output" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Can be called with positional parameters" name="Assert-GreaterThan.Can be called with positional parameters" time="0.0034" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Given collection to Expected it throws" name="Assert-GreaterThan.Given collection to Expected it throws" time="0.0029" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\p\assert\tst\General\Assert-GreaterThanOrEqual.Tests.ps1" executed="True" result="Success" success="True" time="0.1291" asserts="0" description="C:\p\assert\tst\General\Assert-GreaterThanOrEqual.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Assert-GreaterThanOrEqual" executed="True" result="Success" success="True" time="0.0959" asserts="0" description="Assert-GreaterThanOrEqual">
            <results>
              <test-suite type="TestFixture" name="Assert-GreaterThanOrEqual.Comparing strings" executed="True" result="Success" success="True" time="0.0113" asserts="0" description="Assert-GreaterThanOrEqual.Comparing strings">
                <results>
                  <test-case description="Passes when actual is greater than expected" name="Assert-GreaterThanOrEqual.Comparing strings.Passes when actual is greater than expected" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Passes when actual is equal to expected" name="Assert-GreaterThanOrEqual.Comparing strings.Passes when actual is equal to expected" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Fails when actual is lower than expected" name="Assert-GreaterThanOrEqual.Comparing strings.Fails when actual is lower than expected" time="0.0036" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Assert-GreaterThanOrEqual.Comparing integers" executed="True" result="Success" success="True" time="0.0255" asserts="0" description="Assert-GreaterThanOrEqual.Comparing integers">
                <results>
                  <test-case description="Passes when expected is greater than actual" name="Assert-GreaterThanOrEqual.Comparing integers.Passes when expected is greater than actual" time="0.0052" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Passes when actual is equal to expected" name="Assert-GreaterThanOrEqual.Comparing integers.Passes when actual is equal to expected" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Fails when actual is lower than expected" name="Assert-GreaterThanOrEqual.Comparing integers.Fails when actual is lower than expected" time="0.0035" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Assert-GreaterThanOrEqual.Comparing doubles" executed="True" result="Success" success="True" time="0.0365" asserts="0" description="Assert-GreaterThanOrEqual.Comparing doubles">
                <results>
                  <test-case description="Passes when expected is greater than actual" name="Assert-GreaterThanOrEqual.Comparing doubles.Passes when expected is greater than actual" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Passes when actual is equal to expected" name="Assert-GreaterThanOrEqual.Comparing doubles.Passes when actual is equal to expected" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Fails when actual is lower than expected" name="Assert-GreaterThanOrEqual.Comparing doubles.Fails when actual is lower than expected" time="0.0034" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Assert-GreaterThanOrEqual.Comparing decimals" executed="True" result="Success" success="True" time="0.0501" asserts="0" description="Assert-GreaterThanOrEqual.Comparing decimals">
                <results>
                  <test-case description="Passes when expected is greater than actual" name="Assert-GreaterThanOrEqual.Comparing decimals.Passes when expected is greater than actual" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Passes when actual is equal to expected" name="Assert-GreaterThanOrEqual.Comparing decimals.Passes when actual is equal to expected" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Fails when actual is lower than expected" name="Assert-GreaterThanOrEqual.Comparing decimals.Fails when actual is lower than expected" time="0.0034" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Assert-GreaterThanOrEqual.Comparing objects" executed="True" result="Success" success="True" time="0.0586" asserts="0" description="Assert-GreaterThanOrEqual.Comparing objects">
                <results>
                  <test-case description="Passes when two objects are the same" name="Assert-GreaterThanOrEqual.Comparing objects.Passes when two objects are the same" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Fails when two objects are not comparable" name="Assert-GreaterThanOrEqual.Comparing objects.Fails when two objects are not comparable" time="0.0031" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Assert-GreaterThanOrEqual.Validate messages" executed="True" result="Success" success="True" time="0.0839" asserts="0" description="Assert-GreaterThanOrEqual.Validate messages">
                <results>
                  <test-suite type="ParameterizedTest" name="Assert-GreaterThanOrEqual.Validate messages.Given two values '&lt;expected&gt;' and '&lt;actual&gt;' it returns expected message '&lt;message&gt;'" executed="True" result="Success" success="True" time="0.0108" asserts="0" description="Given two values '&lt;expected&gt;' and '&lt;actual&gt;' it returns expected message '&lt;message&gt;'">
                    <results>
                      <test-case description="Given two values 'z' and 'a' it returns expected message 'Expected string 'a' to be greater than or equal to string 'z', but it was not.'" name="Assert-GreaterThanOrEqual.Validate messages.Given two values 'z' and 'a' it returns expected message 'Expected string 'a' to be greater than or equal to string 'z', but it was not.'" time="0.0037" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Given two values '10.1' and '1.1' it returns expected message 'Expected double '1.1' to be greater than or equal to double '10.1', but it was not.'" name="Assert-GreaterThanOrEqual.Validate messages.Given two values '10.1' and '1.1' it returns expected message 'Expected double '1.1' to be greater than or equal to double '10.1', but it was not.'" time="0.0035" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Given two values '10.1' and '1.1' it returns expected message 'Expected decimal '1.1' to be greater than or equal to decimal '10.1', but it was not.'" name="Assert-GreaterThanOrEqual.Validate messages.Given two values '10.1' and '1.1' it returns expected message 'Expected decimal '1.1' to be greater than or equal to decimal '10.1', but it was not.'" time="0.0036" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-case description="Fails for array input even if the last item is greater than then expected value" name="Assert-GreaterThanOrEqual.Fails for array input even if the last item is greater than then expected value" time="0.0053" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Fails with custom message" name="Assert-GreaterThanOrEqual.Fails with custom message" time="0.0034" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Returns the value on output" name="Assert-GreaterThanOrEqual.Returns the value on output" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Can be called with positional parameters" name="Assert-GreaterThanOrEqual.Can be called with positional parameters" time="0.0034" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Given collection to Expected it throws" name="Assert-GreaterThanOrEqual.Given collection to Expected it throws" time="0.0029" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\p\assert\tst\General\Assert-LessThan.Tests.ps1" executed="True" result="Success" success="True" time="0.1403" asserts="0" description="C:\p\assert\tst\General\Assert-LessThan.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Assert-LessThan" executed="True" result="Success" success="True" time="0.1027" asserts="0" description="Assert-LessThan">
            <results>
              <test-suite type="TestFixture" name="Assert-LessThan.Comparing strings" executed="True" result="Success" success="True" time="0.0125" asserts="0" description="Assert-LessThan.Comparing strings">
                <results>
                  <test-case description="Passes when actual is less than expected" name="Assert-LessThan.Comparing strings.Passes when actual is less than expected" time="0.0024" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Fails when actual is equal to expected" name="Assert-LessThan.Comparing strings.Fails when actual is equal to expected" time="0.0036" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Fails when actual is greater than expected" name="Assert-LessThan.Comparing strings.Fails when actual is greater than expected" time="0.0034" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Assert-LessThan.Comparing integers" executed="True" result="Success" success="True" time="0.0276" asserts="0" description="Assert-LessThan.Comparing integers">
                <results>
                  <test-case description="Passes when expected is less than actual" name="Assert-LessThan.Comparing integers.Passes when expected is less than actual" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Fails when actual is equal to expected" name="Assert-LessThan.Comparing integers.Fails when actual is equal to expected" time="0.0063" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Fails when actual is greater than expected" name="Assert-LessThan.Comparing integers.Fails when actual is greater than expected" time="0.0034" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Assert-LessThan.Comparing doubles" executed="True" result="Success" success="True" time="0.0421" asserts="0" description="Assert-LessThan.Comparing doubles">
                <results>
                  <test-case description="Passes when expected is less than actual" name="Assert-LessThan.Comparing doubles.Passes when expected is less than actual" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Fails when actual is equal to expected" name="Assert-LessThan.Comparing doubles.Fails when actual is equal to expected" time="0.0032" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Fails when actual is greater than expected" name="Assert-LessThan.Comparing doubles.Fails when actual is greater than expected" time="0.0032" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Assert-LessThan.Comparing decimals" executed="True" result="Success" success="True" time="0.0541" asserts="0" description="Assert-LessThan.Comparing decimals">
                <results>
                  <test-case description="Passes when expected is less than actual" name="Assert-LessThan.Comparing decimals.Passes when expected is less than actual" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Fails when actual is equal to expected" name="Assert-LessThan.Comparing decimals.Fails when actual is equal to expected" time="0.0034" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Fails when actual is greater than expected" name="Assert-LessThan.Comparing decimals.Fails when actual is greater than expected" time="0.0033" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Assert-LessThan.Comparing objects" executed="True" result="Success" success="True" time="0.0677" asserts="0" description="Assert-LessThan.Comparing objects">
                <results>
                  <test-case description="Fails when two objects are the same" name="Assert-LessThan.Comparing objects.Fails when two objects are the same" time="0.0046" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Fails when two objects are not comparable" name="Assert-LessThan.Comparing objects.Fails when two objects are not comparable" time="0.0059" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Assert-LessThan.Validate messages" executed="True" result="Success" success="True" time="0.0912" asserts="0" description="Assert-LessThan.Validate messages">
                <results>
                  <test-suite type="ParameterizedTest" name="Assert-LessThan.Validate messages.Given two values '&lt;expected&gt;' and '&lt;actual&gt;' it returns expected message '&lt;message&gt;'" executed="True" result="Success" success="True" time="0.0137" asserts="0" description="Given two values '&lt;expected&gt;' and '&lt;actual&gt;' it returns expected message '&lt;message&gt;'">
                    <results>
                      <test-case description="Given two values 'a' and 'z' it returns expected message 'Expected string 'z' to be less than string 'a', but it was not.'" name="Assert-LessThan.Validate messages.Given two values 'a' and 'z' it returns expected message 'Expected string 'z' to be less than string 'a', but it was not.'" time="0.0036" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Given two values '1.1' and '10.1' it returns expected message 'Expected double '10.1' to be less than double '1.1', but it was not.'" name="Assert-LessThan.Validate messages.Given two values '1.1' and '10.1' it returns expected message 'Expected double '10.1' to be less than double '1.1', but it was not.'" time="0.0035" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Given two values '1.1' and '10.1' it returns expected message 'Expected decimal '10.1' to be less than decimal '1.1', but it was not.'" name="Assert-LessThan.Validate messages.Given two values '1.1' and '10.1' it returns expected message 'Expected decimal '10.1' to be less than decimal '1.1', but it was not.'" time="0.0066" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-case description="Fails for array input even if the last item is less than the expected value" name="Assert-LessThan.Fails for array input even if the last item is less than the expected value" time="0.0029" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Fails with custom message" name="Assert-LessThan.Fails with custom message" time="0.0034" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Returns the value on output" name="Assert-LessThan.Returns the value on output" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Can be called with positional parameters" name="Assert-LessThan.Can be called with positional parameters" time="0.0033" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Given collection to Expected it throws" name="Assert-LessThan.Given collection to Expected it throws" time="0.0029" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\p\assert\tst\General\Assert-LessThanOrEqual.Tests.ps1" executed="True" result="Success" success="True" time="0.1306" asserts="0" description="C:\p\assert\tst\General\Assert-LessThanOrEqual.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Assert-LessThanOrEqual" executed="True" result="Success" success="True" time="0.0959" asserts="0" description="Assert-LessThanOrEqual">
            <results>
              <test-suite type="TestFixture" name="Assert-LessThanOrEqual.Comparing strings" executed="True" result="Success" success="True" time="0.0113" asserts="0" description="Assert-LessThanOrEqual.Comparing strings">
                <results>
                  <test-case description="Passes when actual is less than expected" name="Assert-LessThanOrEqual.Comparing strings.Passes when actual is less than expected" time="0.0024" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Passes when actual is equal to expected" name="Assert-LessThanOrEqual.Comparing strings.Passes when actual is equal to expected" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Fails when actual is greater than expected" name="Assert-LessThanOrEqual.Comparing strings.Fails when actual is greater than expected" time="0.0036" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Assert-LessThanOrEqual.Comparing integers" executed="True" result="Success" success="True" time="0.0254" asserts="0" description="Assert-LessThanOrEqual.Comparing integers">
                <results>
                  <test-case description="Passes when expected is less than actual" name="Assert-LessThanOrEqual.Comparing integers.Passes when expected is less than actual" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Passes when actual is equal to expected" name="Assert-LessThanOrEqual.Comparing integers.Passes when actual is equal to expected" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Fails when actual is greater than expected" name="Assert-LessThanOrEqual.Comparing integers.Fails when actual is greater than expected" time="0.0035" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Assert-LessThanOrEqual.Comparing doubles" executed="True" result="Success" success="True" time="0.0388" asserts="0" description="Assert-LessThanOrEqual.Comparing doubles">
                <results>
                  <test-case description="Passes when expected is less than actual" name="Assert-LessThanOrEqual.Comparing doubles.Passes when expected is less than actual" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Passes when actual is equal to expected" name="Assert-LessThanOrEqual.Comparing doubles.Passes when actual is equal to expected" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Fails when actual is greater than expected" name="Assert-LessThanOrEqual.Comparing doubles.Fails when actual is greater than expected" time="0.0058" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Assert-LessThanOrEqual.Comparing decimals" executed="True" result="Success" success="True" time="0.0499" asserts="0" description="Assert-LessThanOrEqual.Comparing decimals">
                <results>
                  <test-case description="Passes when expected is less than actual" name="Assert-LessThanOrEqual.Comparing decimals.Passes when expected is less than actual" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Passes when actual is equal to expected" name="Assert-LessThanOrEqual.Comparing decimals.Passes when actual is equal to expected" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Fails when actual is greater than expected" name="Assert-LessThanOrEqual.Comparing decimals.Fails when actual is greater than expected" time="0.0035" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Assert-LessThanOrEqual.Comparing objects" executed="True" result="Success" success="True" time="0.0609" asserts="0" description="Assert-LessThanOrEqual.Comparing objects">
                <results>
                  <test-case description="Passes when two objects are the same" name="Assert-LessThanOrEqual.Comparing objects.Passes when two objects are the same" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Fails when two objects are not comparable" name="Assert-LessThanOrEqual.Comparing objects.Fails when two objects are not comparable" time="0.0055" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Assert-LessThanOrEqual.Validate messages" executed="True" result="Success" success="True" time="0.0842" asserts="0" description="Assert-LessThanOrEqual.Validate messages">
                <results>
                  <test-suite type="ParameterizedTest" name="Assert-LessThanOrEqual.Validate messages.Given two values '&lt;expected&gt;' and '&lt;actual&gt;' it returns expected message '&lt;message&gt;'" executed="True" result="Success" success="True" time="0.0135" asserts="0" description="Given two values '&lt;expected&gt;' and '&lt;actual&gt;' it returns expected message '&lt;message&gt;'">
                    <results>
                      <test-case description="Given two values 'a' and 'z' it returns expected message 'Expected string 'z' to be less than or equal to string 'a', but it was not.'" name="Assert-LessThanOrEqual.Validate messages.Given two values 'a' and 'z' it returns expected message 'Expected string 'z' to be less than or equal to string 'a', but it was not.'" time="0.0036" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Given two values '1.1' and '10.1' it returns expected message 'Expected double '10.1' to be less than or equal to double '1.1', but it was not.'" name="Assert-LessThanOrEqual.Validate messages.Given two values '1.1' and '10.1' it returns expected message 'Expected double '10.1' to be less than or equal to double '1.1', but it was not.'" time="0.0035" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Given two values '1.1' and '10.1' it returns expected message 'Expected decimal '10.1' to be less than or equal to decimal '1.1', but it was not.'" name="Assert-LessThanOrEqual.Validate messages.Given two values '1.1' and '10.1' it returns expected message 'Expected decimal '10.1' to be less than or equal to decimal '1.1', but it was not.'" time="0.0063" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-case description="Fails for array input even if the last item is less than then expected value" name="Assert-LessThanOrEqual.Fails for array input even if the last item is less than then expected value" time="0.003" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Fails with custom message" name="Assert-LessThanOrEqual.Fails with custom message" time="0.0034" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Returns the value on output" name="Assert-LessThanOrEqual.Returns the value on output" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Can be called with positional parameters" name="Assert-LessThanOrEqual.Can be called with positional parameters" time="0.0033" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Given collection to Expected it throws" name="Assert-LessThanOrEqual.Given collection to Expected it throws" time="0.0029" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\p\assert\tst\General\Assert-NotEqual.Tests.ps1" executed="True" result="Success" success="True" time="0.1144" asserts="0" description="C:\p\assert\tst\General\Assert-NotEqual.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Assert-NotEqual" executed="True" result="Success" success="True" time="0.0789" asserts="0" description="Assert-NotEqual">
            <results>
              <test-suite type="TestFixture" name="Assert-NotEqual.Comparing strings" executed="True" result="Success" success="True" time="0.0092" asserts="0" description="Assert-NotEqual.Comparing strings">
                <results>
                  <test-case description="Fails when two strings are equal" name="Assert-NotEqual.Comparing strings.Fails when two strings are equal" time="0.0038" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Passes when two strings are different" name="Assert-NotEqual.Comparing strings.Passes when two strings are different" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Assert-NotEqual.Comparing integers" executed="True" result="Success" success="True" time="0.021" asserts="0" description="Assert-NotEqual.Comparing integers">
                <results>
                  <test-case description="Fails when two numbers are equal" name="Assert-NotEqual.Comparing integers.Fails when two numbers are equal" time="0.0064" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Passes when two numbers are different" name="Assert-NotEqual.Comparing integers.Passes when two numbers are different" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Assert-NotEqual.Comparing doubles" executed="True" result="Success" success="True" time="0.0297" asserts="0" description="Assert-NotEqual.Comparing doubles">
                <results>
                  <test-case description="Fails when two numbers are equal" name="Assert-NotEqual.Comparing doubles.Fails when two numbers are equal" time="0.0035" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Passes when two numbers are different" name="Assert-NotEqual.Comparing doubles.Passes when two numbers are different" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Assert-NotEqual.Comparing decimals" executed="True" result="Success" success="True" time="0.0415" asserts="0" description="Assert-NotEqual.Comparing decimals">
                <results>
                  <test-case description="Fails when two numbers are equal" name="Assert-NotEqual.Comparing decimals.Fails when two numbers are equal" time="0.0036" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Passes when two numbers are different" name="Assert-NotEqual.Comparing decimals.Passes when two numbers are different" time="0.005" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Assert-NotEqual.Comparing objects" executed="True" result="Success" success="True" time="0.0517" asserts="0" description="Assert-NotEqual.Comparing objects">
                <results>
                  <test-case description="Fails when two objects are the same" name="Assert-NotEqual.Comparing objects.Fails when two objects are the same" time="0.0047" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Passes when two objects are different" name="Assert-NotEqual.Comparing objects.Passes when two objects are different" time="0.0024" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Assert-NotEqual.Validate messages" executed="True" result="Success" success="True" time="0.0672" asserts="0" description="Assert-NotEqual.Validate messages">
                <results>
                  <test-suite type="ParameterizedTest" name="Assert-NotEqual.Validate messages.Given two values that are the same '&lt;value&gt;' it returns expected message '&lt;message&gt;'" executed="True" result="Success" success="True" time="0.0065" asserts="0" description="Given two values that are the same '&lt;value&gt;' it returns expected message '&lt;message&gt;'">
                    <results>
                      <test-case description="Given two values that are the same '1' it returns expected message 'Expected int '1', to be different than the actual value, but they were the same.'" name="Assert-NotEqual.Validate messages.Given two values that are the same '1' it returns expected message 'Expected int '1', to be different than the actual value, but they were the same.'" time="0.0065" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-case description="Passes for array input even if the last item is the same as expected" name="Assert-NotEqual.Passes for array input even if the last item is the same as expected" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Fails with custom message" name="Assert-NotEqual.Fails with custom message" time="0.0034" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Returns the value on output" name="Assert-NotEqual.Returns the value on output" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Can be called with positional parameters" name="Assert-NotEqual.Can be called with positional parameters" time="0.0033" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Given collection to Expected it throws" name="Assert-NotEqual.Given collection to Expected it throws" time="0.0029" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\p\assert\tst\General\Assert-NotNull.Tests.ps1" executed="True" result="Success" success="True" time="0.045" asserts="0" description="C:\p\assert\tst\General\Assert-NotNull.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Assert-NotNull" executed="True" result="Success" success="True" time="0.0164" asserts="0" description="Assert-NotNull">
            <results>
              <test-case description="Given a value it passes" name="Assert-NotNull.Given a value it passes" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Given $null it fails" name="Assert-NotNull.Given $null it fails" time="0.0032" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Returns the given value" name="Assert-NotNull.Returns the given value" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Can be called with positional parameters" name="Assert-NotNull.Can be called with positional parameters" time="0.0031" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\p\assert\tst\General\Assert-NotSame.Tests.ps1" executed="True" result="Success" success="True" time="0.0678" asserts="0" description="C:\p\assert\tst\General\Assert-NotSame.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Assert-NotSame" executed="True" result="Success" success="True" time="0.0293" asserts="0" description="Assert-NotSame">
            <results>
              <test-case description="Fails when two objects are the same instance" name="Assert-NotSame.Fails when two objects are the same instance" time="0.0049" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Passes when two objects are different instance" name="Assert-NotSame.Passes when two objects are different instance" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Passes for array input even if the last item is the same as expected" name="Assert-NotSame.Passes for array input even if the last item is the same as expected" time="0.0048" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Fails with custom message" name="Assert-NotSame.Fails with custom message" time="0.0034" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Returns the value on output" name="Assert-NotSame.Returns the value on output" time="0.0021" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Can be called with positional parameters" name="Assert-NotSame.Can be called with positional parameters" time="0.0048" asserts="0" success="True" result="Success" executed="True" />
              <test-suite type="ParameterizedTest" name="Assert-NotSame.Given two values that are the same instance it returns expected message '&lt;message&gt;'" executed="True" result="Success" success="True" time="0.0035" asserts="0" description="Given two values that are the same instance it returns expected message '&lt;message&gt;'">
                <results>
                  <test-case description="Given two values that are the same instance it returns expected message 'Expected string 'a', to not be the same instance.'" name="Assert-NotSame.Given two values that are the same instance it returns expected message 'Expected string 'a', to not be the same instance.'" time="0.0035" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\p\assert\tst\General\Assert-NotType.Tests.ps1" executed="True" result="Success" success="True" time="0.047" asserts="0" description="C:\p\assert\tst\General\Assert-NotType.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Assert-NotType" executed="True" result="Success" success="True" time="0.0177" asserts="0" description="Assert-NotType">
            <results>
              <test-case description="Given value of expected type it fails" name="Assert-NotType.Given value of expected type it fails" time="0.0039" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Given an object of different type it passes" name="Assert-NotType.Given an object of different type it passes" time="0.0021" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Returns the given value" name="Assert-NotType.Returns the given value" time="0.0021" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Can be called with positional parameters" name="Assert-NotType.Can be called with positional parameters" time="0.0036" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\p\assert\tst\General\Assert-Null.Tests.ps1" executed="True" result="Success" success="True" time="0.0456" asserts="0" description="C:\p\assert\tst\General\Assert-Null.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Assert-Null" executed="True" result="Success" success="True" time="0.0172" asserts="0" description="Assert-Null">
            <results>
              <test-case description="Given $null it passes" name="Assert-Null.Given $null it passes" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Given an objects it fails" name="Assert-Null.Given an objects it fails" time="0.0034" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Returns the given value" name="Assert-Null.Returns the given value" time="0.0047" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Can be called with positional parameters" name="Assert-Null.Can be called with positional parameters" time="0.0033" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\p\assert\tst\General\Assert-Same.Tests.ps1" executed="True" result="Success" success="True" time="0.0881" asserts="0" description="C:\p\assert\tst\General\Assert-Same.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Assert-Same" executed="True" result="Success" success="True" time="0.0574" asserts="0" description="Assert-Same">
            <results>
              <test-suite type="TestFixture" name="Assert-Same.Throws when $expected is a value type or string to warn user about unexpected behavior" executed="True" result="Success" success="True" time="0.0471" asserts="0" description="Assert-Same.Throws when $expected is a value type or string to warn user about unexpected behavior">
                <results>
                  <test-suite type="ParameterizedTest" name="Assert-Same.Throws when $expected is a value type or string to warn user about unexpected behavior.throws for value &lt;value&gt;" executed="True" result="Success" success="True" time="0.0145" asserts="0" description="throws for value &lt;value&gt;">
                    <results>
                      <test-case description="throws for value 1" name="Assert-Same.Throws when $expected is a value type or string to warn user about unexpected behavior.throws for value 1" time="0.003" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="throws for value 1.0" name="Assert-Same.Throws when $expected is a value type or string to warn user about unexpected behavior.throws for value 1.0" time="0.0028" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="throws for value 1" name="Assert-Same.Throws when $expected is a value type or string to warn user about unexpected behavior.throws for value 1" time="0.003" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="throws for value c" name="Assert-Same.Throws when $expected is a value type or string to warn user about unexpected behavior.throws for value c" time="0.0028" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="throws for value abc" name="Assert-Same.Throws when $expected is a value type or string to warn user about unexpected behavior.throws for value abc" time="0.0028" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-case description="Passes when two objects are the same instance" name="Assert-Same.Passes when two objects are the same instance" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Fails when two objects are different instance" name="Assert-Same.Fails when two objects are different instance" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Fails for array input even if the last item is the same as expected" name="Assert-Same.Fails for array input even if the last item is the same as expected" time="0.005" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Fails with custom message" name="Assert-Same.Fails with custom message" time="0.0038" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Returns the value on output" name="Assert-Same.Returns the value on output" time="0.005" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Can be called with positional parameters" name="Assert-Same.Can be called with positional parameters" time="0.007" asserts="0" success="True" result="Success" executed="True" />
              <test-suite type="ParameterizedTest" name="Assert-Same.Given two values that are not the same instance '&lt;expected&gt;' and '&lt;actual&gt;' it returns expected message '&lt;message&gt;'" executed="True" result="Success" success="True" time="0.0051" asserts="0" description="Given two values that are not the same instance '&lt;expected&gt;' and '&lt;actual&gt;' it returns expected message '&lt;message&gt;'">
                <results>
                  <test-case description="Given two values that are not the same instance '' and '' it returns expected message 'Expected PSObject '', to be the same instance but it was not.'" name="Assert-Same.Given two values that are not the same instance '' and '' it returns expected message 'Expected PSObject '', to be the same instance but it was not.'" time="0.0051" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\p\assert\tst\General\Assert-Type.Tests.ps1" executed="True" result="Success" success="True" time="0.0464" asserts="0" description="C:\p\assert\tst\General\Assert-Type.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Assert-Type" executed="True" result="Success" success="True" time="0.0181" asserts="0" description="Assert-Type">
            <results>
              <test-case description="Given value of expected type it passes" name="Assert-Type.Given value of expected type it passes" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Given an object of different type it fails" name="Assert-Type.Given an object of different type it fails" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Returns the given value" name="Assert-Type.Returns the given value" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Can be called with positional parameters" name="Assert-Type.Can be called with positional parameters" time="0.0035" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\p\assert\tst\String\Assert-Like.Tests.ps1" executed="True" result="Success" success="True" time="0.1762" asserts="0" description="C:\p\assert\tst\String\Assert-Like.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Assert-Like" executed="True" result="Success" success="True" time="0.1415" asserts="0" description="Assert-Like">
            <results>
              <test-suite type="TestFixture" name="Assert-Like.Case insensitive matching" executed="True" result="Success" success="True" time="0.0747" asserts="0" description="Assert-Like.Case insensitive matching">
                <results>
                  <test-case description="Passes give strings that have the same value" name="Assert-Like.Case insensitive matching.Passes give strings that have the same value" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Fails given strings with different values" name="Assert-Like.Case insensitive matching.Fails given strings with different values" time="0.003" asserts="0" success="True" result="Success" executed="True" />
                  <test-suite type="ParameterizedTest" name="Assert-Like.Case insensitive matching.Fails given strings with different case and different values. comparing '&lt;actual&gt;':'&lt;expected&gt;'" executed="True" result="Success" success="True" time="0.0117" asserts="0" description="Fails given strings with different case and different values. comparing '&lt;actual&gt;':'&lt;expected&gt;'">
                    <results>
                      <test-case description="Fails given strings with different case and different values. comparing 'ABc':'def'" name="Assert-Like.Case insensitive matching.Fails given strings with different case and different values. comparing 'ABc':'def'" time="0.0029" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Fails given strings with different case and different values. comparing 'aBc':'def'" name="Assert-Like.Case insensitive matching.Fails given strings with different case and different values. comparing 'aBc':'def'" time="0.0058" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Fails given strings with different case and different values. comparing 'ABC':'def'" name="Assert-Like.Case insensitive matching.Fails given strings with different case and different values. comparing 'ABC':'def'" time="0.0031" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="ParameterizedTest" name="Assert-Like.Case insensitive matching.Fails given strings from which one is sorrounded by whitespace. comparing '&lt;actual&gt;':'&lt;expected&gt;'" executed="True" result="Success" success="True" time="0.0087" asserts="0" description="Fails given strings from which one is sorrounded by whitespace. comparing '&lt;actual&gt;':'&lt;expected&gt;'">
                    <results>
                      <test-case description="Fails given strings from which one is sorrounded by whitespace. comparing 'abc ':'abc'" name="Assert-Like.Case insensitive matching.Fails given strings from which one is sorrounded by whitespace. comparing 'abc ':'abc'" time="0.0029" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Fails given strings from which one is sorrounded by whitespace. comparing 'abc ':'abc'" name="Assert-Like.Case insensitive matching.Fails given strings from which one is sorrounded by whitespace. comparing 'abc ':'abc'" time="0.0029" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Fails given strings from which one is sorrounded by whitespace. comparing 'ab c':'abc'" name="Assert-Like.Case insensitive matching.Fails given strings from which one is sorrounded by whitespace. comparing 'ab c':'abc'" time="0.0029" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="ParameterizedTest" name="Assert-Like.Case insensitive matching.Passes given strings with different case that start with a given pattern. comparing '&lt;actual&gt;':'&lt;expected&gt;'" executed="True" result="Success" success="True" time="0.0094" asserts="0" description="Passes given strings with different case that start with a given pattern. comparing '&lt;actual&gt;':'&lt;expected&gt;'">
                    <results>
                      <test-case description="Passes given strings with different case that start with a given pattern. comparing 'ABcdef':'abc*'" name="Assert-Like.Case insensitive matching.Passes given strings with different case that start with a given pattern. comparing 'ABcdef':'abc*'" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Passes given strings with different case that start with a given pattern. comparing 'aBcdef':'abc*'" name="Assert-Like.Case insensitive matching.Passes given strings with different case that start with a given pattern. comparing 'aBcdef':'abc*'" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Passes given strings with different case that start with a given pattern. comparing 'ABCDEF':'abc*'" name="Assert-Like.Case insensitive matching.Passes given strings with different case that start with a given pattern. comparing 'ABCDEF':'abc*'" time="0.0047" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="ParameterizedTest" name="Assert-Like.Case insensitive matching.Fails given strings with different case that start with a different pattern. comparing '&lt;actual&gt;':'&lt;expected&gt;'" executed="True" result="Success" success="True" time="0.0089" asserts="0" description="Fails given strings with different case that start with a different pattern. comparing '&lt;actual&gt;':'&lt;expected&gt;'">
                    <results>
                      <test-case description="Fails given strings with different case that start with a different pattern. comparing 'ABcdef':'ghi*'" name="Assert-Like.Case insensitive matching.Fails given strings with different case that start with a different pattern. comparing 'ABcdef':'ghi*'" time="0.0031" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Fails given strings with different case that start with a different pattern. comparing 'aBcdef':'ghi*'" name="Assert-Like.Case insensitive matching.Fails given strings with different case that start with a different pattern. comparing 'aBcdef':'ghi*'" time="0.0029" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Fails given strings with different case that start with a different pattern. comparing 'ABCDEF':'ghi*'" name="Assert-Like.Case insensitive matching.Fails given strings with different case that start with a different pattern. comparing 'ABCDEF':'ghi*'" time="0.0029" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="ParameterizedTest" name="Assert-Like.Case insensitive matching.Passes given strings with different case that contain a given pattern. comparing '&lt;actual&gt;':'&lt;expected&gt;'" executed="True" result="Success" success="True" time="0.0073" asserts="0" description="Passes given strings with different case that contain a given pattern. comparing '&lt;actual&gt;':'&lt;expected&gt;'">
                    <results>
                      <test-case description="Passes given strings with different case that contain a given pattern. comparing 'ABcdef':'*cd*'" name="Assert-Like.Case insensitive matching.Passes given strings with different case that contain a given pattern. comparing 'ABcdef':'*cd*'" time="0.0026" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Passes given strings with different case that contain a given pattern. comparing 'aBcdef':'*cd*'" name="Assert-Like.Case insensitive matching.Passes given strings with different case that contain a given pattern. comparing 'aBcdef':'*cd*'" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Passes given strings with different case that contain a given pattern. comparing 'ABCDEF':'*CD*'" name="Assert-Like.Case insensitive matching.Passes given strings with different case that contain a given pattern. comparing 'ABCDEF':'*CD*'" time="0.0024" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="ParameterizedTest" name="Assert-Like.Case insensitive matching.Fails given strings with different case that contain a different pattern. comparing '&lt;actual&gt;':'&lt;expected&gt;'" executed="True" result="Success" success="True" time="0.0116" asserts="0" description="Fails given strings with different case that contain a different pattern. comparing '&lt;actual&gt;':'&lt;expected&gt;'">
                    <results>
                      <test-case description="Fails given strings with different case that contain a different pattern. comparing 'ABcdef':'*gh*'" name="Assert-Like.Case insensitive matching.Fails given strings with different case that contain a different pattern. comparing 'ABcdef':'*gh*'" time="0.0054" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Fails given strings with different case that contain a different pattern. comparing 'aBcdef':'*gh*'" name="Assert-Like.Case insensitive matching.Fails given strings with different case that contain a different pattern. comparing 'aBcdef':'*gh*'" time="0.003" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Fails given strings with different case that contain a different pattern. comparing 'ABCDEF':'*GH*'" name="Assert-Like.Case insensitive matching.Fails given strings with different case that contain a different pattern. comparing 'ABCDEF':'*GH*'" time="0.0032" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="ParameterizedTest" name="Assert-Like.Case insensitive matching.Passes given strings with different case and same values. comparing '&lt;actual&gt;':'&lt;expected&gt;'" executed="True" result="Success" success="True" time="0.0071" asserts="0" description="Passes given strings with different case and same values. comparing '&lt;actual&gt;':'&lt;expected&gt;'">
                    <results>
                      <test-case description="Passes given strings with different case and same values. comparing 'ABc':'abc'" name="Assert-Like.Case insensitive matching.Passes given strings with different case and same values. comparing 'ABc':'abc'" time="0.0024" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Passes given strings with different case and same values. comparing 'aBc':'abc'" name="Assert-Like.Case insensitive matching.Passes given strings with different case and same values. comparing 'aBc':'abc'" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Passes given strings with different case and same values. comparing 'ABC':'abc'" name="Assert-Like.Case insensitive matching.Passes given strings with different case and same values. comparing 'ABC':'abc'" time="0.0024" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Assert-Like.Case sensitive matching" executed="True" result="Success" success="True" time="0.0899" asserts="0" description="Assert-Like.Case sensitive matching">
                <results>
                  <test-suite type="ParameterizedTest" name="Assert-Like.Case sensitive matching.Fails given strings with different case but same values. comparing '&lt;actual&gt;':'&lt;expected&gt;'" executed="True" result="Success" success="True" time="0.0118" asserts="0" description="Fails given strings with different case but same values. comparing '&lt;actual&gt;':'&lt;expected&gt;'">
                    <results>
                      <test-case description="Fails given strings with different case but same values. comparing 'ABc':'abc'" name="Assert-Like.Case sensitive matching.Fails given strings with different case but same values. comparing 'ABc':'abc'" time="0.003" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Fails given strings with different case but same values. comparing 'aBc':'abc'" name="Assert-Like.Case sensitive matching.Fails given strings with different case but same values. comparing 'aBc':'abc'" time="0.0029" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Fails given strings with different case but same values. comparing 'ABC':'abc'" name="Assert-Like.Case sensitive matching.Fails given strings with different case but same values. comparing 'ABC':'abc'" time="0.0059" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Assert-Like.Case sensitive matching" executed="True" result="Success" success="True" time="0.0959" asserts="0" description="Assert-Like.Case sensitive matching">
                <results>
                  <test-suite type="ParameterizedTest" name="Assert-Like.Case sensitive matching.Fails given strings with different case that contain the given pattern. comparing '&lt;actual&gt;':'&lt;expected&gt;'" executed="True" result="Success" success="True" time="0.0031" asserts="0" description="Fails given strings with different case that contain the given pattern. comparing '&lt;actual&gt;':'&lt;expected&gt;'">
                    <results>
                      <test-case description="Fails given strings with different case that contain the given pattern. comparing 'ABCDEF':'*cd*'" name="Assert-Like.Case sensitive matching.Fails given strings with different case that contain the given pattern. comparing 'ABCDEF':'*cd*'" time="0.0031" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Assert-Like.Verify messages" executed="True" result="Success" success="True" time="0.1361" asserts="0" description="Assert-Like.Verify messages">
                <results>
                  <test-suite type="ParameterizedTest" name="Assert-Like.Verify messages.Given two values that are not alike '&lt;actual&gt;' and '&lt;expected&gt;' it returns the correct message '&lt;message&gt;'" executed="True" result="Success" success="True" time="0.0092" asserts="0" description="Given two values that are not alike '&lt;actual&gt;' and '&lt;expected&gt;' it returns the correct message '&lt;message&gt;'">
                    <results>
                      <test-case description="Given two values that are not alike 'a' and 'b' it returns the correct message 'Expected the string 'a' to match 'b' but it did not.'" name="Assert-Like.Verify messages.Given two values that are not alike 'a' and 'b' it returns the correct message 'Expected the string 'a' to match 'b' but it did not.'" time="0.0031" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Given two values that are not alike 'ab' and 'd*' it returns the correct message 'Expected the string 'ab' to match 'd*' but it did not.'" name="Assert-Like.Verify messages.Given two values that are not alike 'ab' and 'd*' it returns the correct message 'Expected the string 'ab' to match 'd*' but it did not.'" time="0.003" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Given two values that are not alike 'something' and '*abc*' it returns the correct message 'Expected the string 'something' to match '*abc*' but it did not.'" name="Assert-Like.Verify messages.Given two values that are not alike 'something' and '*abc*' it returns the correct message 'Expected the string 'something' to match '*abc*' but it did not.'" time="0.003" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="ParameterizedTest" name="Assert-Like.Verify messages.Given two values that are not alike becuase of case '&lt;actual&gt;' and '&lt;expected&gt;' it returns the correct message '&lt;message&gt;'" executed="True" result="Success" success="True" time="0.0118" asserts="0" description="Given two values that are not alike becuase of case '&lt;actual&gt;' and '&lt;expected&gt;' it returns the correct message '&lt;message&gt;'">
                    <results>
                      <test-case description="Given two values that are not alike becuase of case 'a' and 'B' it returns the correct message 'Expected the string 'a' to case sensitively match 'B' but it did not.'" name="Assert-Like.Verify messages.Given two values that are not alike becuase of case 'a' and 'B' it returns the correct message 'Expected the string 'a' to case sensitively match 'B' but it did not.'" time="0.003" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Given two values that are not alike becuase of case 'ab' and 'B*' it returns the correct message 'Expected the string 'ab' to case sensitively match 'B*' but it did not.'" name="Assert-Like.Verify messages.Given two values that are not alike becuase of case 'ab' and 'B*' it returns the correct message 'Expected the string 'ab' to case sensitively match 'B*' but it did not.'" time="0.0031" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Given two values that are not alike becuase of case 'something' and '*SOME*' it returns the correct message 'Expected the string 'something' to case sensitively match '*SOME*' but it did not.'" name="Assert-Like.Verify messages.Given two values that are not alike becuase of case 'something' and '*SOME*' it returns the correct message 'Expected the string 'something' to case sensitively match '*SOME*' but it did not.'" time="0.0057" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-case description="Allows actual to be passed from pipeline" name="Assert-Like.Allows actual to be passed from pipeline" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Allows expected to be passed by position" name="Assert-Like.Allows expected to be passed by position" time="0.0021" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Allows actual to be passed by pipeline and expected by position" name="Assert-Like.Allows actual to be passed by pipeline and expected by position" time="0.0021" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Throws when given a collection to avoid confusing matches of the last item only" name="Assert-Like.Throws when given a collection to avoid confusing matches of the last item only" time="0.0027" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Can be called with positional parameters" name="Assert-Like.Can be called with positional parameters" time="0.0062" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\p\assert\tst\String\Assert-NotLike.Tests.ps1" executed="True" result="Success" success="True" time="0.1732" asserts="0" description="C:\p\assert\tst\String\Assert-NotLike.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Assert-NotLike" executed="True" result="Success" success="True" time="0.1357" asserts="0" description="Assert-NotLike">
            <results>
              <test-suite type="TestFixture" name="Assert-NotLike.Case insensitive matching" executed="True" result="Success" success="True" time="0.0767" asserts="0" description="Assert-NotLike.Case insensitive matching">
                <results>
                  <test-case description="Fails give strings that have the same value" name="Assert-NotLike.Case insensitive matching.Fails give strings that have the same value" time="0.0031" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Passes given strings with different values" name="Assert-NotLike.Case insensitive matching.Passes given strings with different values" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                  <test-suite type="ParameterizedTest" name="Assert-NotLike.Case insensitive matching.Passes given strings with different case and different values. comparing '&lt;actual&gt;':'&lt;expected&gt;'" executed="True" result="Success" success="True" time="0.0104" asserts="0" description="Passes given strings with different case and different values. comparing '&lt;actual&gt;':'&lt;expected&gt;'">
                    <results>
                      <test-case description="Passes given strings with different case and different values. comparing 'ABc':'def'" name="Assert-NotLike.Case insensitive matching.Passes given strings with different case and different values. comparing 'ABc':'def'" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Passes given strings with different case and different values. comparing 'aBc':'def'" name="Assert-NotLike.Case insensitive matching.Passes given strings with different case and different values. comparing 'aBc':'def'" time="0.0055" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Passes given strings with different case and different values. comparing 'ABC':'def'" name="Assert-NotLike.Case insensitive matching.Passes given strings with different case and different values. comparing 'ABC':'def'" time="0.0025" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="ParameterizedTest" name="Assert-NotLike.Case insensitive matching.Passes given strings from which one is sorrounded by whitespace. comparing '&lt;actual&gt;':'&lt;expected&gt;'" executed="True" result="Success" success="True" time="0.007" asserts="0" description="Passes given strings from which one is sorrounded by whitespace. comparing '&lt;actual&gt;':'&lt;expected&gt;'">
                    <results>
                      <test-case description="Passes given strings from which one is sorrounded by whitespace. comparing 'abc ':'abc'" name="Assert-NotLike.Case insensitive matching.Passes given strings from which one is sorrounded by whitespace. comparing 'abc ':'abc'" time="0.0024" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Passes given strings from which one is sorrounded by whitespace. comparing 'abc ':'abc'" name="Assert-NotLike.Case insensitive matching.Passes given strings from which one is sorrounded by whitespace. comparing 'abc ':'abc'" time="0.0024" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Passes given strings from which one is sorrounded by whitespace. comparing 'ab c':'abc'" name="Assert-NotLike.Case insensitive matching.Passes given strings from which one is sorrounded by whitespace. comparing 'ab c':'abc'" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="ParameterizedTest" name="Assert-NotLike.Case insensitive matching.Fails given strings with different case that start with a given pattern. comparing '&lt;actual&gt;':'&lt;expected&gt;'" executed="True" result="Success" success="True" time="0.0091" asserts="0" description="Fails given strings with different case that start with a given pattern. comparing '&lt;actual&gt;':'&lt;expected&gt;'">
                    <results>
                      <test-case description="Fails given strings with different case that start with a given pattern. comparing 'ABcdef':'abc*'" name="Assert-NotLike.Case insensitive matching.Fails given strings with different case that start with a given pattern. comparing 'ABcdef':'abc*'" time="0.003" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Fails given strings with different case that start with a given pattern. comparing 'aBcdef':'abc*'" name="Assert-NotLike.Case insensitive matching.Fails given strings with different case that start with a given pattern. comparing 'aBcdef':'abc*'" time="0.0031" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Fails given strings with different case that start with a given pattern. comparing 'ABCDEF':'abc*'" name="Assert-NotLike.Case insensitive matching.Fails given strings with different case that start with a given pattern. comparing 'ABCDEF':'abc*'" time="0.0029" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="ParameterizedTest" name="Assert-NotLike.Case insensitive matching.Passes given strings with different case that start with a different pattern. comparing '&lt;actual&gt;':'&lt;expected&gt;'" executed="True" result="Success" success="True" time="0.007" asserts="0" description="Passes given strings with different case that start with a different pattern. comparing '&lt;actual&gt;':'&lt;expected&gt;'">
                    <results>
                      <test-case description="Passes given strings with different case that start with a different pattern. comparing 'ABcdef':'ghi*'" name="Assert-NotLike.Case insensitive matching.Passes given strings with different case that start with a different pattern. comparing 'ABcdef':'ghi*'" time="0.0024" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Passes given strings with different case that start with a different pattern. comparing 'aBcdef':'ghi*'" name="Assert-NotLike.Case insensitive matching.Passes given strings with different case that start with a different pattern. comparing 'aBcdef':'ghi*'" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Passes given strings with different case that start with a different pattern. comparing 'ABCDEF':'ghi*'" name="Assert-NotLike.Case insensitive matching.Passes given strings with different case that start with a different pattern. comparing 'ABCDEF':'ghi*'" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="ParameterizedTest" name="Assert-NotLike.Case insensitive matching.Fails given strings with different case that contain a given pattern. comparing '&lt;actual&gt;':'&lt;expected&gt;'" executed="True" result="Success" success="True" time="0.009" asserts="0" description="Fails given strings with different case that contain a given pattern. comparing '&lt;actual&gt;':'&lt;expected&gt;'">
                    <results>
                      <test-case description="Fails given strings with different case that contain a given pattern. comparing 'ABcdef':'*cd*'" name="Assert-NotLike.Case insensitive matching.Fails given strings with different case that contain a given pattern. comparing 'ABcdef':'*cd*'" time="0.0031" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Fails given strings with different case that contain a given pattern. comparing 'aBcdef':'*cd*'" name="Assert-NotLike.Case insensitive matching.Fails given strings with different case that contain a given pattern. comparing 'aBcdef':'*cd*'" time="0.0029" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Fails given strings with different case that contain a given pattern. comparing 'ABCDEF':'*CD*'" name="Assert-NotLike.Case insensitive matching.Fails given strings with different case that contain a given pattern. comparing 'ABCDEF':'*CD*'" time="0.0029" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="ParameterizedTest" name="Assert-NotLike.Case insensitive matching.Passes given strings with different case that contain a different pattern. comparing '&lt;actual&gt;':'&lt;expected&gt;'" executed="True" result="Success" success="True" time="0.0097" asserts="0" description="Passes given strings with different case that contain a different pattern. comparing '&lt;actual&gt;':'&lt;expected&gt;'">
                    <results>
                      <test-case description="Passes given strings with different case that contain a different pattern. comparing 'ABcdef':'*gh*'" name="Assert-NotLike.Case insensitive matching.Passes given strings with different case that contain a different pattern. comparing 'ABcdef':'*gh*'" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Passes given strings with different case that contain a different pattern. comparing 'aBcdef':'*gh*'" name="Assert-NotLike.Case insensitive matching.Passes given strings with different case that contain a different pattern. comparing 'aBcdef':'*gh*'" time="0.0051" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Passes given strings with different case that contain a different pattern. comparing 'ABCDEF':'*GH*'" name="Assert-NotLike.Case insensitive matching.Passes given strings with different case that contain a different pattern. comparing 'ABCDEF':'*GH*'" time="0.0024" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="ParameterizedTest" name="Assert-NotLike.Case insensitive matching.Fails given strings with different case and same values. comparing '&lt;actual&gt;':'&lt;expected&gt;'" executed="True" result="Success" success="True" time="0.0096" asserts="0" description="Fails given strings with different case and same values. comparing '&lt;actual&gt;':'&lt;expected&gt;'">
                    <results>
                      <test-case description="Fails given strings with different case and same values. comparing 'ABc':'abc'" name="Assert-NotLike.Case insensitive matching.Fails given strings with different case and same values. comparing 'ABc':'abc'" time="0.0033" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Fails given strings with different case and same values. comparing 'aBc':'abc'" name="Assert-NotLike.Case insensitive matching.Fails given strings with different case and same values. comparing 'aBc':'abc'" time="0.0034" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Fails given strings with different case and same values. comparing 'ABC':'abc'" name="Assert-NotLike.Case insensitive matching.Fails given strings with different case and same values. comparing 'ABC':'abc'" time="0.0029" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Assert-NotLike.Case sensitive matching" executed="True" result="Success" success="True" time="0.0868" asserts="0" description="Assert-NotLike.Case sensitive matching">
                <results>
                  <test-suite type="ParameterizedTest" name="Assert-NotLike.Case sensitive matching.Passes given strings with different case but same values. comparing '&lt;actual&gt;':'&lt;expected&gt;'" executed="True" result="Success" success="True" time="0.0071" asserts="0" description="Passes given strings with different case but same values. comparing '&lt;actual&gt;':'&lt;expected&gt;'">
                    <results>
                      <test-case description="Passes given strings with different case but same values. comparing 'ABc':'abc'" name="Assert-NotLike.Case sensitive matching.Passes given strings with different case but same values. comparing 'ABc':'abc'" time="0.0024" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Passes given strings with different case but same values. comparing 'aBc':'abc'" name="Assert-NotLike.Case sensitive matching.Passes given strings with different case but same values. comparing 'aBc':'abc'" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Passes given strings with different case but same values. comparing 'ABC':'abc'" name="Assert-NotLike.Case sensitive matching.Passes given strings with different case but same values. comparing 'ABC':'abc'" time="0.0024" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Assert-NotLike.Case sensitive matching" executed="True" result="Success" success="True" time="0.0954" asserts="0" description="Assert-NotLike.Case sensitive matching">
                <results>
                  <test-suite type="ParameterizedTest" name="Assert-NotLike.Case sensitive matching.Passes given strings with different case that contain the given pattern. comparing '&lt;actual&gt;':'&lt;expected&gt;'" executed="True" result="Success" success="True" time="0.0055" asserts="0" description="Passes given strings with different case that contain the given pattern. comparing '&lt;actual&gt;':'&lt;expected&gt;'">
                    <results>
                      <test-case description="Passes given strings with different case that contain the given pattern. comparing 'ABCDEF':'*cd*'" name="Assert-NotLike.Case sensitive matching.Passes given strings with different case that contain the given pattern. comparing 'ABCDEF':'*cd*'" time="0.0055" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Assert-NotLike.Verify messages" executed="True" result="Success" success="True" time="0.1327" asserts="0" description="Assert-NotLike.Verify messages">
                <results>
                  <test-suite type="ParameterizedTest" name="Assert-NotLike.Verify messages.Given two values that are alike '&lt;actual&gt;' and '&lt;expected&gt;' it returns the correct message '&lt;message&gt;'" executed="True" result="Success" success="True" time="0.0123" asserts="0" description="Given two values that are alike '&lt;actual&gt;' and '&lt;expected&gt;' it returns the correct message '&lt;message&gt;'">
                    <results>
                      <test-case description="Given two values that are alike 'a' and 'A' it returns the correct message 'Expected the string 'a' to not match 'A' but it matched it.'" name="Assert-NotLike.Verify messages.Given two values that are alike 'a' and 'A' it returns the correct message 'Expected the string 'a' to not match 'A' but it matched it.'" time="0.0061" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Given two values that are alike 'ab' and 'a*' it returns the correct message 'Expected the string 'ab' to not match 'a*' but it matched it.'" name="Assert-NotLike.Verify messages.Given two values that are alike 'ab' and 'a*' it returns the correct message 'Expected the string 'ab' to not match 'a*' but it matched it.'" time="0.0031" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Given two values that are alike 'something' and 'SOME*' it returns the correct message 'Expected the string 'something' to not match 'SOME*' but it matched it.'" name="Assert-NotLike.Verify messages.Given two values that are alike 'something' and 'SOME*' it returns the correct message 'Expected the string 'something' to not match 'SOME*' but it matched it.'" time="0.003" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="ParameterizedTest" name="Assert-NotLike.Verify messages.Given two values that are alike becuase of case '&lt;actual&gt;' and '&lt;expected&gt;' it returns the correct message '&lt;message&gt;'" executed="True" result="Success" success="True" time="0.0093" asserts="0" description="Given two values that are alike becuase of case '&lt;actual&gt;' and '&lt;expected&gt;' it returns the correct message '&lt;message&gt;'">
                    <results>
                      <test-case description="Given two values that are alike becuase of case 'a' and 'a' it returns the correct message 'Expected the string 'a' to case sensitively not match 'a' but it matched it.'" name="Assert-NotLike.Verify messages.Given two values that are alike becuase of case 'a' and 'a' it returns the correct message 'Expected the string 'a' to case sensitively not match 'a' but it matched it.'" time="0.003" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Given two values that are alike becuase of case 'AB' and 'A*' it returns the correct message 'Expected the string 'AB' to case sensitively not match 'A*' but it matched it.'" name="Assert-NotLike.Verify messages.Given two values that are alike becuase of case 'AB' and 'A*' it returns the correct message 'Expected the string 'AB' to case sensitively not match 'A*' but it matched it.'" time="0.0032" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Given two values that are alike becuase of case 'SOMETHING' and '*SOME*' it returns the correct message 'Expected the string 'SOMETHING' to case sensitively not match '*SOME*' but it matched it.'" name="Assert-NotLike.Verify messages.Given two values that are alike becuase of case 'SOMETHING' and '*SOME*' it returns the correct message 'Expected the string 'SOMETHING' to case sensitively not match '*SOME*' but it matched it.'" time="0.003" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-case description="Allows actual to be passed from pipeline" name="Assert-NotLike.Allows actual to be passed from pipeline" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Allows expected to be passed by position" name="Assert-NotLike.Allows expected to be passed by position" time="0.0021" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Allows actual to be passed by pipeline and expected by position" name="Assert-NotLike.Allows actual to be passed by pipeline and expected by position" time="0.0021" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Can be called with positional parameters" name="Assert-NotLike.Can be called with positional parameters" time="0.0028" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Throws when given a collection to avoid confusing matches of the last item only" name="Assert-NotLike.Throws when given a collection to avoid confusing matches of the last item only" time="0.0027" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\p\assert\tst\String\Assert-StringEqual.Tests.ps1" executed="True" result="Success" success="True" time="0.143" asserts="0" description="C:\p\assert\tst\String\Assert-StringEqual.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Test-StringEqual" executed="True" result="Success" success="True" time="0.0637" asserts="0" description="Test-StringEqual">
            <results>
              <test-suite type="TestFixture" name="Test-StringEqual.Case insensitive matching" executed="True" result="Success" success="True" time="0.035" asserts="0" description="Test-StringEqual.Case insensitive matching">
                <results>
                  <test-case description="strings with the same values are equal" name="Test-StringEqual.Case insensitive matching.strings with the same values are equal" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="strings with different values are not equal" name="Test-StringEqual.Case insensitive matching.strings with different values are not equal" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                  <test-suite type="ParameterizedTest" name="Test-StringEqual.Case insensitive matching.strings with different case and different values are not equal. comparing '&lt;l&gt;':'&lt;r&gt;'" executed="True" result="Success" success="True" time="0.0069" asserts="0" description="strings with different case and different values are not equal. comparing '&lt;l&gt;':'&lt;r&gt;'">
                    <results>
                      <test-case description="strings with different case and different values are not equal. comparing 'ABc':'def'" name="Test-StringEqual.Case insensitive matching.strings with different case and different values are not equal. comparing 'ABc':'def'" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="strings with different case and different values are not equal. comparing 'aBc':'def'" name="Test-StringEqual.Case insensitive matching.strings with different case and different values are not equal. comparing 'aBc':'def'" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="strings with different case and different values are not equal. comparing 'ABC':'def'" name="Test-StringEqual.Case insensitive matching.strings with different case and different values are not equal. comparing 'ABC':'def'" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="ParameterizedTest" name="Test-StringEqual.Case insensitive matching.strings from which one is sorrounded by whitespace are not equal. comparing '&lt;l&gt;':'&lt;r&gt;'" executed="True" result="Success" success="True" time="0.0096" asserts="0" description="strings from which one is sorrounded by whitespace are not equal. comparing '&lt;l&gt;':'&lt;r&gt;'">
                    <results>
                      <test-case description="strings from which one is sorrounded by whitespace are not equal. comparing 'abc ':'abc'" name="Test-StringEqual.Case insensitive matching.strings from which one is sorrounded by whitespace are not equal. comparing 'abc ':'abc'" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="strings from which one is sorrounded by whitespace are not equal. comparing 'abc ':'abc'" name="Test-StringEqual.Case insensitive matching.strings from which one is sorrounded by whitespace are not equal. comparing 'abc ':'abc'" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="strings from which one is sorrounded by whitespace are not equal. comparing 'ab c':'abc'" name="Test-StringEqual.Case insensitive matching.strings from which one is sorrounded by whitespace are not equal. comparing 'ab c':'abc'" time="0.005" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="ParameterizedTest" name="Test-StringEqual.Case insensitive matching.strings with different case and same values are equal. comparing '&lt;l&gt;':'&lt;r&gt;'" executed="True" result="Success" success="True" time="0.0103" asserts="0" description="strings with different case and same values are equal. comparing '&lt;l&gt;':'&lt;r&gt;'">
                    <results>
                      <test-case description="strings with different case and same values are equal. comparing 'ABc':'abc'" name="Test-StringEqual.Case insensitive matching.strings with different case and same values are equal. comparing 'ABc':'abc'" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="strings with different case and same values are equal. comparing 'aBc':'abc'" name="Test-StringEqual.Case insensitive matching.strings with different case and same values are equal. comparing 'aBc':'abc'" time="0.0056" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="strings with different case and same values are equal. comparing 'ABC':'abc'" name="Test-StringEqual.Case insensitive matching.strings with different case and same values are equal. comparing 'ABC':'abc'" time="0.0024" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Test-StringEqual.Case sensitive matching" executed="True" result="Success" success="True" time="0.0451" asserts="0" description="Test-StringEqual.Case sensitive matching">
                <results>
                  <test-suite type="ParameterizedTest" name="Test-StringEqual.Case sensitive matching.strings with different case but same values are not equal. comparing '&lt;l&gt;':'&lt;r&gt;'" executed="True" result="Success" success="True" time="0.0069" asserts="0" description="strings with different case but same values are not equal. comparing '&lt;l&gt;':'&lt;r&gt;'">
                    <results>
                      <test-case description="strings with different case but same values are not equal. comparing 'ABc':'abc'" name="Test-StringEqual.Case sensitive matching.strings with different case but same values are not equal. comparing 'ABc':'abc'" time="0.0024" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="strings with different case but same values are not equal. comparing 'aBc':'abc'" name="Test-StringEqual.Case sensitive matching.strings with different case but same values are not equal. comparing 'aBc':'abc'" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="strings with different case but same values are not equal. comparing 'ABC':'abc'" name="Test-StringEqual.Case sensitive matching.strings with different case but same values are not equal. comparing 'ABC':'abc'" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Test-StringEqual.Case insensitive matching with ingoring whitespace" executed="True" result="Success" success="True" time="0.0607" asserts="0" description="Test-StringEqual.Case insensitive matching with ingoring whitespace">
                <results>
                  <test-suite type="ParameterizedTest" name="Test-StringEqual.Case insensitive matching with ingoring whitespace.strings sorrounded or containing whitespace are equal. comparing '&lt;l&gt;':'&lt;r&gt;'" executed="True" result="Success" success="True" time="0.0123" asserts="0" description="strings sorrounded or containing whitespace are equal. comparing '&lt;l&gt;':'&lt;r&gt;'">
                    <results>
                      <test-case description="strings sorrounded or containing whitespace are equal. comparing 'abc ':'abc'" name="Test-StringEqual.Case insensitive matching with ingoring whitespace.strings sorrounded or containing whitespace are equal. comparing 'abc ':'abc'" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="strings sorrounded or containing whitespace are equal. comparing 'abc ':'abc'" name="Test-StringEqual.Case insensitive matching with ingoring whitespace.strings sorrounded or containing whitespace are equal. comparing 'abc ':'abc'" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="strings sorrounded or containing whitespace are equal. comparing 'ab c':'abc'" name="Test-StringEqual.Case insensitive matching with ingoring whitespace.strings sorrounded or containing whitespace are equal. comparing 'ab c':'abc'" time="0.0053" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="strings sorrounded or containing whitespace are equal. comparing 'ab c':'a b c'" name="Test-StringEqual.Case insensitive matching with ingoring whitespace.strings sorrounded or containing whitespace are equal. comparing 'ab c':'a b c'" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-StringEqualDefaultFailureMessage" executed="True" result="Success" success="True" time="0.0687" asserts="0" description="Get-StringEqualDefaultFailureMessage">
            <results>
              <test-case description="returns correct default message" name="Get-StringEqualDefaultFailureMessage.returns correct default message" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Assert-StringEqual" executed="True" result="Success" success="True" time="0.1082" asserts="0" description="Assert-StringEqual">
            <results>
              <test-suite type="TestFixture" name="Assert-StringEqual.String specific features" executed="True" result="Success" success="True" time="0.0337" asserts="0" description="Assert-StringEqual.String specific features">
                <results>
                  <test-case description="Can compare strings in CaseSensitive mode" name="Assert-StringEqual.String specific features.Can compare strings in CaseSensitive mode" time="0.0054" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Can compare strings without whitespace" name="Assert-StringEqual.String specific features.Can compare strings without whitespace" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-case description="Does nothing when string are the same" name="Assert-StringEqual.Does nothing when string are the same" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Throws when strings are different" name="Assert-StringEqual.Throws when strings are different" time="0.0028" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Throws with default message when test fails" name="Assert-StringEqual.Throws with default message when test fails" time="0.0051" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Throws with custom message when test fails" name="Assert-StringEqual.Throws with custom message when test fails" time="0.0028" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Allows actual to be passed from pipeline" name="Assert-StringEqual.Allows actual to be passed from pipeline" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Allows expected to be passed by position" name="Assert-StringEqual.Allows expected to be passed by position" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Allows actual to be passed by pipeline and expected by position" name="Assert-StringEqual.Allows actual to be passed by pipeline and expected by position" time="0.0021" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Fails when collection of strings is passed in by pipeline, even if the last string is the same as the expected string" name="Assert-StringEqual.Fails when collection of strings is passed in by pipeline, even if the last string is the same as the expected string" time="0.0028" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Can be called with positional parameters" name="Assert-StringEqual.Can be called with positional parameters" time="0.0029" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\p\assert\tst\String\Assert-StringNotEqual.Tests.ps1" executed="True" result="Success" success="True" time="0.0759" asserts="0" description="C:\p\assert\tst\String\Assert-StringNotEqual.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Get-StringNotEqualDefaultFailureMessage" executed="True" result="Success" success="True" time="0.0054" asserts="0" description="Get-StringNotEqualDefaultFailureMessage">
            <results>
              <test-case description="returns correct default message" name="Get-StringNotEqualDefaultFailureMessage.returns correct default message" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Assert-StringNotEqual" executed="True" result="Success" success="True" time="0.0399" asserts="0" description="Assert-StringNotEqual">
            <results>
              <test-suite type="TestFixture" name="Assert-StringNotEqual.String specific features" executed="True" result="Success" success="True" time="0.029" asserts="0" description="Assert-StringNotEqual.String specific features">
                <results>
                  <test-case description="Can compare strings in CaseSensitive mode" name="Assert-StringNotEqual.String specific features.Can compare strings in CaseSensitive mode" time="0.0021" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Can compare strings without whitespace" name="Assert-StringNotEqual.String specific features.Can compare strings without whitespace" time="0.0029" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-case description="Does nothing when string are different" name="Assert-StringNotEqual.Does nothing when string are different" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Throws when strings are the same" name="Assert-StringNotEqual.Throws when strings are the same" time="0.0028" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Throws with default message when test fails" name="Assert-StringNotEqual.Throws with default message when test fails" time="0.0028" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Throws with custom message when test fails" name="Assert-StringNotEqual.Throws with custom message when test fails" time="0.0028" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Allows actual to be passed from pipeline" name="Assert-StringNotEqual.Allows actual to be passed from pipeline" time="0.0054" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Allows expected to be passed by position" name="Assert-StringNotEqual.Allows expected to be passed by position" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Allows actual to be passed by pipeline and expected by position" name="Assert-StringNotEqual.Allows actual to be passed by pipeline and expected by position" time="0.0021" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Can be called with positional parameters" name="Assert-StringNotEqual.Can be called with positional parameters" time="0.0027" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\p\assert\TypeClass\tst\TypeClass.Tests.ps1" executed="True" result="Success" success="True" time="0.2355" asserts="0" description="C:\p\assert\TypeClass\tst\TypeClass.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Is-Value" executed="True" result="Success" success="True" time="0.0424" asserts="0" description="Is-Value">
            <results>
              <test-case description="Given $null it returns $false" name="Is-Value.Given $null it returns $false" time="0.002" asserts="0" success="True" result="Success" executed="True" />
              <test-suite type="ParameterizedTest" name="Is-Value.Given reference type (not string) '&lt;value&gt;' it returns $false" executed="True" result="Success" success="True" time="0.0136" asserts="0" description="Given reference type (not string) '&lt;value&gt;' it returns $false">
                <results>
                  <test-case description="Given reference type (not string) '' it returns $false" name="Is-Value.Given reference type (not string) '' it returns $false" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given reference type (not string) '1 2' it returns $false" name="Is-Value.Given reference type (not string) '1 2' it returns $false" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given reference type (not string) 'System.Collections.Hashtable' it returns $false" name="Is-Value.Given reference type (not string) 'System.Collections.Hashtable' it returns $false" time="0.0047" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given reference type (not string) 'type' it returns $false" name="Is-Value.Given reference type (not string) 'type' it returns $false" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given reference type (not string) 'System.Diagnostics.Process' it returns $false" name="Is-Value.Given reference type (not string) 'System.Diagnostics.Process' it returns $false" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="Is-Value.Given '&lt;value&gt;', which is a value, string, enum, scriptblock or array with a single item of those types it returns $true" executed="True" result="Success" success="True" time="0.0227" asserts="0" description="Given '&lt;value&gt;', which is a value, string, enum, scriptblock or array with a single item of those types it returns $true">
                <results>
                  <test-case description="Given '1', which is a value, string, enum, scriptblock or array with a single item of those types it returns $true" name="Is-Value.Given '1', which is a value, string, enum, scriptblock or array with a single item of those types it returns $true" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given '2', which is a value, string, enum, scriptblock or array with a single item of those types it returns $true" name="Is-Value.Given '2', which is a value, string, enum, scriptblock or array with a single item of those types it returns $true" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given '1.2', which is a value, string, enum, scriptblock or array with a single item of those types it returns $true" name="Is-Value.Given '1.2', which is a value, string, enum, scriptblock or array with a single item of those types it returns $true" time="0.0024" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given '1.3', which is a value, string, enum, scriptblock or array with a single item of those types it returns $true" name="Is-Value.Given '1.3', which is a value, string, enum, scriptblock or array with a single item of those types it returns $true" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given 'abc', which is a value, string, enum, scriptblock or array with a single item of those types it returns $true" name="Is-Value.Given 'abc', which is a value, string, enum, scriptblock or array with a single item of those types it returns $true" time="0.0047" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given 'Monday', which is a value, string, enum, scriptblock or array with a single item of those types it returns $true" name="Is-Value.Given 'Monday', which is a value, string, enum, scriptblock or array with a single item of those types it returns $true" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given 'abc', which is a value, string, enum, scriptblock or array with a single item of those types it returns $true" name="Is-Value.Given 'abc', which is a value, string, enum, scriptblock or array with a single item of those types it returns $true" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given '1', which is a value, string, enum, scriptblock or array with a single item of those types it returns $true" name="Is-Value.Given '1', which is a value, string, enum, scriptblock or array with a single item of those types it returns $true" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given 'abc', which is a value, string, enum, scriptblock or array with a single item of those types it returns $true" name="Is-Value.Given 'abc', which is a value, string, enum, scriptblock or array with a single item of those types it returns $true" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Is-DecimalNumber" executed="True" result="Success" success="True" time="0.0611" asserts="0" description="Is-DecimalNumber">
            <results>
              <test-case description="Given a string it returns $false" name="Is-DecimalNumber.Given a string it returns $false" time="0.0021" asserts="0" success="True" result="Success" executed="True" />
              <test-suite type="ParameterizedTest" name="Is-DecimalNumber.Given a number it returns $true" executed="True" result="Success" success="True" time="0.0133" asserts="0" description="Given a number it returns $true">
                <results>
                  <test-case description="Given a number it returns $true" name="Is-DecimalNumber.Given a number it returns $true(1.1)" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given a number it returns $true" name="Is-DecimalNumber.Given a number it returns $true(1.1)" time="0.0021" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given a number it returns $true" name="Is-DecimalNumber.Given a number it returns $true(1.1)" time="0.0021" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given a number it returns $true" name="Is-DecimalNumber.Given a number it returns $true(1.1)" time="0.0021" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given a number it returns $true" name="Is-DecimalNumber.Given a number it returns $true(1.1)" time="0.0047" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Is-ScriptBlock" executed="True" result="Success" success="True" time="0.0826" asserts="0" description="Is-ScriptBlock">
            <results>
              <test-suite type="ParameterizedTest" name="Is-ScriptBlock.Given a scriptblock '{&lt;value&gt;}' it returns $true" executed="True" result="Success" success="True" time="0.0066" asserts="0" description="Given a scriptblock '{&lt;value&gt;}' it returns $true">
                <results>
                  <test-case description="Given a scriptblock '{}' it returns $true" name="Is-ScriptBlock.Given a scriptblock '{}' it returns $true" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given a scriptblock '{abc}' it returns $true" name="Is-ScriptBlock.Given a scriptblock '{abc}' it returns $true" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given a scriptblock '{ Get-Process -Name Idle }' it returns $true" name="Is-ScriptBlock.Given a scriptblock '{ Get-Process -Name Idle }' it returns $true" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="Is-ScriptBlock.Given a value '&lt;value&gt;' that is not a scriptblock it returns $false" executed="True" result="Success" success="True" time="0.0114" asserts="0" description="Given a value '&lt;value&gt;' that is not a scriptblock it returns $false">
                <results>
                  <test-case description="Given a value '' that is not a scriptblock it returns $false" name="Is-ScriptBlock.Given a value '' that is not a scriptblock it returns $false" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given a value '1' that is not a scriptblock it returns $false" name="Is-ScriptBlock.Given a value '1' that is not a scriptblock it returns $false" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given a value 'abc' that is not a scriptblock it returns $false" name="Is-ScriptBlock.Given a value 'abc' that is not a scriptblock it returns $false" time="0.0047" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given a value 'type' that is not a scriptblock it returns $false" name="Is-ScriptBlock.Given a value 'type' that is not a scriptblock it returns $false" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Is-Hashtable" executed="True" result="Success" success="True" time="0.0946" asserts="0" description="Is-Hashtable">
            <results>
              <test-suite type="ParameterizedTest" name="Is-Hashtable.Given hashtable '&lt;value&gt;' it returns $true" executed="True" result="Success" success="True" time="0.0045" asserts="0" description="Given hashtable '&lt;value&gt;' it returns $true">
                <results>
                  <test-case description="Given hashtable 'System.Collections.Hashtable' it returns $true" name="Is-Hashtable.Given hashtable 'System.Collections.Hashtable' it returns $true" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given hashtable 'System.Collections.Hashtable' it returns $true" name="Is-Hashtable.Given hashtable 'System.Collections.Hashtable' it returns $true" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="Is-Hashtable.Given a value '&lt;value&gt;' which is not a hashtable it returns $false" executed="True" result="Success" success="True" time="0.0044" asserts="0" description="Given a value '&lt;value&gt;' which is not a hashtable it returns $false">
                <results>
                  <test-case description="Given a value 'Jakub' which is not a hashtable it returns $false" name="Is-Hashtable.Given a value 'Jakub' which is not a hashtable it returns $false" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given a value '1 2 3 4' which is not a hashtable it returns $false" name="Is-Hashtable.Given a value '1 2 3 4' which is not a hashtable it returns $false" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Is-Dictionary" executed="True" result="Success" success="True" time="0.1092" asserts="0" description="Is-Dictionary">
            <results>
              <test-suite type="ParameterizedTest" name="Is-Dictionary.Given a value '&lt;value&gt;' which is not a dictionary it returns $false" executed="True" result="Success" success="True" time="0.0045" asserts="0" description="Given a value '&lt;value&gt;' which is not a dictionary it returns $false">
                <results>
                  <test-case description="Given a value 'Jakub' which is not a dictionary it returns $false" name="Is-Dictionary.Given a value 'Jakub' which is not a dictionary it returns $false" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given a value '1 2 3 4' which is not a dictionary it returns $false" name="Is-Dictionary.Given a value '1 2 3 4' which is not a dictionary it returns $false" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="Is-Dictionary.Given dictionary '&lt;value&gt;' it returns $true" executed="True" result="Success" success="True" time="0.007" asserts="0" description="Given dictionary '&lt;value&gt;' it returns $true">
                <results>
                  <test-case description="Given dictionary 'System.Collections.Generic.Dictionary`2[System.String,System.Object]' it returns $true" name="Is-Dictionary.Given dictionary 'System.Collections.Generic.Dictionary`2[System.String,System.Object]' it returns $true" time="0.0048" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given dictionary 'System.Collections.Generic.Dictionary`2[System.String,System.Object]' it returns $true" name="Is-Dictionary.Given dictionary 'System.Collections.Generic.Dictionary`2[System.String,System.Object]' it returns $true" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Is-Collection" executed="True" result="Success" success="True" time="0.1787" asserts="0" description="Is-Collection">
            <results>
              <test-suite type="ParameterizedTest" name="Is-Collection.Given a collection '&lt;value&gt;' of type '&lt;value.GetType()&gt;' it returns $true" executed="True" result="Success" success="True" time="0.02" asserts="0" description="Given a collection '&lt;value&gt;' of type '&lt;value.GetType()&gt;' it returns $true">
                <results>
                  <test-case description="Given a collection '' of type 'System.Object[]' it returns $true" name="Is-Collection.Given a collection '' of type 'System.Object[]' it returns $true" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given a collection '1 2 3' of type 'System.Object[]' it returns $true" name="Is-Collection.Given a collection '1 2 3' of type 'System.Object[]' it returns $true" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given a collection 'System.Collections.Generic.List`1[System.Int32] 1' of type 'System.Object[]' it returns $true" name="Is-Collection.Given a collection 'System.Collections.Generic.List`1[System.Int32] 1' of type 'System.Object[]' it returns $true" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given a collection 'System.Collections.Generic.List`1[System.Decimal] 2' of type 'System.Object[]' it returns $true" name="Is-Collection.Given a collection 'System.Collections.Generic.List`1[System.Decimal] 2' of type 'System.Object[]' it returns $true" time="0.0048" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given a collection '1 2 3' of type 'System.Collections.Generic.List[int]' it returns $true" name="Is-Collection.Given a collection '1 2 3' of type 'System.Collections.Generic.List[int]' it returns $true" time="0.0026" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given a collection '1 2 3' of type 'System.Collections.Generic.List[int]' it returns $true" name="Is-Collection.Given a collection '1 2 3' of type 'System.Collections.Generic.List[int]' it returns $true" time="0.0024" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given a collection 'System.Diagnostics.Process (AppleMobileDeviceService) System.Diagnostics.Process (ApplicationFrameHost) System.Diagnostics.Process (armsvc) System.Diagnostics.Process (atkexComSvc) System.Diagnostics.Process (backgroundTaskHost) System.Diagnostics.Process (CcmExec) System.Diagnostics.Process (Code) System.Diagnostics.Process (Code) System.Diagnostics.Process (Code) System.Diagnostics.Process (Code) System.Diagnostics.Process (Code) System.Diagnostics.Process (Code) System.Diagnostics.Process (Code) System.Diagnostics.Process (Code) System.Diagnostics.Process (Code) System.Diagnostics.Process (Code) System.Diagnostics.Process (Code) System.Diagnostics.Process (CodeHelper) System.Diagnostics.Process (CodeHelper) System.Diagnostics.Process (com.docker.service) System.Diagnostics.Process (CompPkgSrv) System.Diagnostics.Process (conhost) System.Diagnostics.Process (conhost) System.Diagnostics.Process (conhost) System.Diagnostics.Process (conhost) System.Diagnostics.Process (conhost) System.Diagnostics.Process (conhost) System.Diagnostics.Process (conhost) System.Diagnostics.Process (conhost) System.Diagnostics.Process (conhost) System.Diagnostics.Process (conhost) System.Diagnostics.Process (conhost) System.Diagnostics.Process (conhost) System.Diagnostics.Process (conhost) System.Diagnostics.Process (conhost) System.Diagnostics.Process (csrss) System.Diagnostics.Process (csrss) System.Diagnostics.Process (ctfmon) System.Diagnostics.Process (devenv) System.Diagnostics.Process (devenv) System.Diagnostics.Process (devenv) System.Diagnostics.Process (dllhost) System.Diagnostics.Process (dllhost) System.Diagnostics.Process (dllhost) System.Diagnostics.Process (dwm) System.Diagnostics.Process (Everything) System.Diagnostics.Process (Everything) System.Diagnostics.Process (explorer) System.Diagnostics.Process (FileCoAuth) System.Diagnostics.Process (fontdrvhost) System.Diagnostics.Process (fontdrvhost) System.Diagnostics.Process (GpVpnApp) System.Diagnostics.Process (HelpPane) System.Diagnostics.Process (HxAccounts) System.Diagnostics.Process (HxOutlook) System.Diagnostics.Process (HxTsr) System.Diagnostics.Process (Idle) System.Diagnostics.Process (IESettingSync) System.Diagnostics.Process (iexplore) System.Diagnostics.Process (iexplore) System.Diagnostics.Process (IpOverUsbSvc) System.Diagnostics.Process (laclient) System.Diagnostics.Process (Linux File Systems for Windows by Paragon Software) System.Diagnostics.Process (LockApp) System.Diagnostics.Process (LogiFacecamService) System.Diagnostics.Process (LogiOptions) System.Diagnostics.Process (LogiOptionsMgr) System.Diagnostics.Process (LogiOverlay) System.Diagnostics.Process (LsaIso) System.Diagnostics.Process (lsass) System.Diagnostics.Process (mDNSResponder) System.Diagnostics.Process (Memory Compression) System.Diagnostics.Process (Microsoft.Alm.Shared.Remoting.RemoteContainer.dll) System.Diagnostics.Process (Microsoft.Alm.Shared.Remoting.RemoteContainer.dll) System.Diagnostics.Process (Microsoft.Alm.Shared.Remoting.RemoteContainer.dll) System.Diagnostics.Process (Microsoft.Management.Services.IntuneWindowsAgent) System.Diagnostics.Process (Microsoft.Photos) System.Diagnostics.Process (Microsoft.ServiceHub.Controller) System.Diagnostics.Process (Microsoft.ServiceHub.Controller) System.Diagnostics.Process (Microsoft.ServiceHub.Controller) System.Diagnostics.Process (MoUsoCoreWorker) System.Diagnostics.Process (MpCmdRun) System.Diagnostics.Process (msedge) System.Diagnostics.Process (msedge) System.Diagnostics.Process (msedge) System.Diagnostics.Process (msedge) System.Diagnostics.Process (msedge) System.Diagnostics.Process (msedge) System.Diagnostics.Process (msedge) System.Diagnostics.Process (msedge) System.Diagnostics.Process (msedge) System.Diagnostics.Process (msedge) System.Diagnostics.Process (msedge) System.Diagnostics.Process (msedge) System.Diagnostics.Process (msedge) System.Diagnostics.Process (msedge) System.Diagnostics.Process (msedge) System.Diagnostics.Process (msedge) System.Diagnostics.Process (msedge) System.Diagnostics.Process (msedge) System.Diagnostics.Process (msedge) System.Diagnostics.Process (msedge) System.Diagnostics.Process (msedge) System.Diagnostics.Process (msedge) System.Diagnostics.Process (msedge) System.Diagnostics.Process (msedge) System.Diagnostics.Process (msedge) System.Diagnostics.Process (msedge) System.Diagnostics.Process (msedge) System.Diagnostics.Process (msedge) System.Diagnostics.Process (msedge) System.Diagnostics.Process (msedge) System.Diagnostics.Process (msedge) System.Diagnostics.Process (msedge) System.Diagnostics.Process (msedge) System.Diagnostics.Process (MsMpEng) System.Diagnostics.Process (MsSense) System.Diagnostics.Process (nahimicNotifSys) System.Diagnostics.Process (NahimicService) System.Diagnostics.Process (NahimicSvc32) System.Diagnostics.Process (NahimicSvc64) System.Diagnostics.Process (NisSrv) System.Diagnostics.Process (NVDisplay.Container) System.Diagnostics.Process (NVDisplay.Container) System.Diagnostics.Process (OfficeClickToRun) System.Diagnostics.Process (OneDrive) System.Diagnostics.Process (OneDrive) System.Diagnostics.Process (OneDrive) System.Diagnostics.Process (onenoteim) System.Diagnostics.Process (ONENOTEM) System.Diagnostics.Process (OpenConsole) System.Diagnostics.Process (OUTLOOK) System.Diagnostics.Process (paragon_service) System.Diagnostics.Process (PerfWatson2) System.Diagnostics.Process (PerfWatson2) System.Diagnostics.Process (PerfWatson2) System.Diagnostics.Process (pwsh) System.Diagnostics.Process (pwsh) System.Diagnostics.Process (pwsh) System.Diagnostics.Process (pwsh) System.Diagnostics.Process (pwsh) System.Diagnostics.Process (QualysAgent) System.Diagnostics.Process (Registry) System.Diagnostics.Process (rundll32) System.Diagnostics.Process (RuntimeBroker) System.Diagnostics.Process (RuntimeBroker) System.Diagnostics.Process (RuntimeBroker) System.Diagnostics.Process (RuntimeBroker) System.Diagnostics.Process (RuntimeBroker) System.Diagnostics.Process (RuntimeBroker) System.Diagnostics.Process (RuntimeBroker) System.Diagnostics.Process (RuntimeBroker) System.Diagnostics.Process (RuntimeBroker) System.Diagnostics.Process (RuntimeBroker) System.Diagnostics.Process (RuntimeBroker) System.Diagnostics.Process (RuntimeBroker) System.Diagnostics.Process (RuntimeBroker) System.Diagnostics.Process (RuntimeBroker) System.Diagnostics.Process (RuntimeBroker) System.Diagnostics.Process (RuntimeBroker) System.Diagnostics.Process (SCNotification) System.Diagnostics.Process (ScriptedSandbox64) System.Diagnostics.Process (ScriptedSandbox64) System.Diagnostics.Process (ScriptedSandbox64) System.Diagnostics.Process (SearchApp) System.Diagnostics.Process (SearchFilterHost) System.Diagnostics.Process (SearchIndexer) System.Diagnostics.Process (SearchProtocolHost) System.Diagnostics.Process (Secure System) System.Diagnostics.Process (SecurityHealthService) System.Diagnostics.Process (SecurityHealthSystray) System.Diagnostics.Process (SenseCE) System.Diagnostics.Process (SenseNdr) System.Diagnostics.Process (ServiceHub.DataWarehouseHost) System.Diagnostics.Process (ServiceHub.DataWarehouseHost) System.Diagnostics.Process (ServiceHub.DataWarehouseHost) System.Diagnostics.Process (ServiceHub.Host.CLR) System.Diagnostics.Process (ServiceHub.Host.CLR.x64) System.Diagnostics.Process (ServiceHub.Host.CLR.x64) System.Diagnostics.Process (ServiceHub.Host.CLR.x64) System.Diagnostics.Process (ServiceHub.Host.CLR.x86) System.Diagnostics.Process (ServiceHub.Host.CLR.x86) System.Diagnostics.Process (ServiceHub.Host.CLR.x86) System.Diagnostics.Process (ServiceHub.Host.CLR.x86) System.Diagnostics.Process (ServiceHub.Host.CLR.x86) System.Diagnostics.Process (ServiceHub.Host.CLR.x86) System.Diagnostics.Process (ServiceHub.Host.CLR.x86) System.Diagnostics.Process (ServiceHub.Host.CLR.x86) System.Diagnostics.Process (ServiceHub.IdentityHost) System.Diagnostics.Process (ServiceHub.IdentityHost) System.Diagnostics.Process (ServiceHub.IdentityHost) System.Diagnostics.Process (ServiceHub.RoslynCodeAnalysisService) System.Diagnostics.Process (ServiceHub.RoslynCodeAnalysisServiceS) System.Diagnostics.Process (ServiceHub.RoslynCodeAnalysisServiceS) System.Diagnostics.Process (ServiceHub.SettingsHost) System.Diagnostics.Process (ServiceHub.SettingsHost) System.Diagnostics.Process (ServiceHub.SettingsHost) System.Diagnostics.Process (ServiceHub.TestWindowStoreHost) System.Diagnostics.Process (ServiceHub.TestWindowStoreHost) System.Diagnostics.Process (ServiceHub.TestWindowStoreHost) System.Diagnostics.Process (ServiceHub.ThreadedWaitDialog) System.Diagnostics.Process (ServiceHub.ThreadedWaitDialog) System.Diagnostics.Process (ServiceHub.VSDetouredHost) System.Diagnostics.Process (ServiceHub.VSDetouredHost) System.Diagnostics.Process (ServiceHub.VSDetouredHost) System.Diagnostics.Process (services) System.Diagnostics.Process (SettingSyncHost) System.Diagnostics.Process (SgrmBroker) System.Diagnostics.Process (ShellExperienceHost) System.Diagnostics.Process (sihost) System.Diagnostics.Process (Skype) System.Diagnostics.Process (Skype) System.Diagnostics.Process (Skype) System.Diagnostics.Process (Skype) System.Diagnostics.Process (Skype) System.Diagnostics.Process (Skype) System.Diagnostics.Process (smartscreen) System.Diagnostics.Process (smss) System.Diagnostics.Process (spoolsv) System.Diagnostics.Process (sqlwriter) System.Diagnostics.Process (StartMenuExperienceHost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (System) System.Diagnostics.Process (SystemSettings) System.Diagnostics.Process (taskhostw) System.Diagnostics.Process (Teams) System.Diagnostics.Process (Teams) System.Diagnostics.Process (Teams) System.Diagnostics.Process (Teams) System.Diagnostics.Process (Teams) System.Diagnostics.Process (Teams) System.Diagnostics.Process (Teams) System.Diagnostics.Process (Teams) System.Diagnostics.Process (Teams) System.Diagnostics.Process (Teams) System.Diagnostics.Process (TextInputHost) System.Diagnostics.Process (touchcursor) System.Diagnostics.Process (uhssvc) System.Diagnostics.Process (UserOOBEBroker) System.Diagnostics.Process (vds) System.Diagnostics.Process (Video.UI) System.Diagnostics.Process (vmcompute) System.Diagnostics.Process (vmmem) System.Diagnostics.Process (vmmem) System.Diagnostics.Process (vmms) System.Diagnostics.Process (vmwp) System.Diagnostics.Process (vsls-agent) System.Diagnostics.Process (vsls-agent) System.Diagnostics.Process (vstest.console) System.Diagnostics.Process (vstest.console) System.Diagnostics.Process (vstest.console) System.Diagnostics.Process (WindowsTerminal) System.Diagnostics.Process (wininit) System.Diagnostics.Process (winlogon) System.Diagnostics.Process (WinStore.App) System.Diagnostics.Process (WmiPrvSE) System.Diagnostics.Process (WmiPrvSE) System.Diagnostics.Process (WmiPrvSE) System.Diagnostics.Process (WmiPrvSE) System.Diagnostics.Process (WmiPrvSE) System.Diagnostics.Process (WmiPrvSE) System.Diagnostics.Process (WmiPrvSE) System.Diagnostics.Process (WmiPrvSE) System.Diagnostics.Process (WUDFHost) System.Diagnostics.Process (WUDFHost) System.Diagnostics.Process (YourPhone)' of type 'System.Object[]' it returns $true" name="Is-Collection.Given a collection 'System.Diagnostics.Process (AppleMobileDeviceService) System.Diagnostics.Process (ApplicationFrameHost) System.Diagnostics.Process (armsvc) System.Diagnostics.Process (atkexComSvc) System.Diagnostics.Process (backgroundTaskHost) System.Diagnostics.Process (CcmExec) System.Diagnostics.Process (Code) System.Diagnostics.Process (Code) System.Diagnostics.Process (Code) System.Diagnostics.Process (Code) System.Diagnostics.Process (Code) System.Diagnostics.Process (Code) System.Diagnostics.Process (Code) System.Diagnostics.Process (Code) System.Diagnostics.Process (Code) System.Diagnostics.Process (Code) System.Diagnostics.Process (Code) System.Diagnostics.Process (CodeHelper) System.Diagnostics.Process (CodeHelper) System.Diagnostics.Process (com.docker.service) System.Diagnostics.Process (CompPkgSrv) System.Diagnostics.Process (conhost) System.Diagnostics.Process (conhost) System.Diagnostics.Process (conhost) System.Diagnostics.Process (conhost) System.Diagnostics.Process (conhost) System.Diagnostics.Process (conhost) System.Diagnostics.Process (conhost) System.Diagnostics.Process (conhost) System.Diagnostics.Process (conhost) System.Diagnostics.Process (conhost) System.Diagnostics.Process (conhost) System.Diagnostics.Process (conhost) System.Diagnostics.Process (conhost) System.Diagnostics.Process (conhost) System.Diagnostics.Process (csrss) System.Diagnostics.Process (csrss) System.Diagnostics.Process (ctfmon) System.Diagnostics.Process (devenv) System.Diagnostics.Process (devenv) System.Diagnostics.Process (devenv) System.Diagnostics.Process (dllhost) System.Diagnostics.Process (dllhost) System.Diagnostics.Process (dllhost) System.Diagnostics.Process (dwm) System.Diagnostics.Process (Everything) System.Diagnostics.Process (Everything) System.Diagnostics.Process (explorer) System.Diagnostics.Process (FileCoAuth) System.Diagnostics.Process (fontdrvhost) System.Diagnostics.Process (fontdrvhost) System.Diagnostics.Process (GpVpnApp) System.Diagnostics.Process (HelpPane) System.Diagnostics.Process (HxAccounts) System.Diagnostics.Process (HxOutlook) System.Diagnostics.Process (HxTsr) System.Diagnostics.Process (Idle) System.Diagnostics.Process (IESettingSync) System.Diagnostics.Process (iexplore) System.Diagnostics.Process (iexplore) System.Diagnostics.Process (IpOverUsbSvc) System.Diagnostics.Process (laclient) System.Diagnostics.Process (Linux File Systems for Windows by Paragon Software) System.Diagnostics.Process (LockApp) System.Diagnostics.Process (LogiFacecamService) System.Diagnostics.Process (LogiOptions) System.Diagnostics.Process (LogiOptionsMgr) System.Diagnostics.Process (LogiOverlay) System.Diagnostics.Process (LsaIso) System.Diagnostics.Process (lsass) System.Diagnostics.Process (mDNSResponder) System.Diagnostics.Process (Memory Compression) System.Diagnostics.Process (Microsoft.Alm.Shared.Remoting.RemoteContainer.dll) System.Diagnostics.Process (Microsoft.Alm.Shared.Remoting.RemoteContainer.dll) System.Diagnostics.Process (Microsoft.Alm.Shared.Remoting.RemoteContainer.dll) System.Diagnostics.Process (Microsoft.Management.Services.IntuneWindowsAgent) System.Diagnostics.Process (Microsoft.Photos) System.Diagnostics.Process (Microsoft.ServiceHub.Controller) System.Diagnostics.Process (Microsoft.ServiceHub.Controller) System.Diagnostics.Process (Microsoft.ServiceHub.Controller) System.Diagnostics.Process (MoUsoCoreWorker) System.Diagnostics.Process (MpCmdRun) System.Diagnostics.Process (msedge) System.Diagnostics.Process (msedge) System.Diagnostics.Process (msedge) System.Diagnostics.Process (msedge) System.Diagnostics.Process (msedge) System.Diagnostics.Process (msedge) System.Diagnostics.Process (msedge) System.Diagnostics.Process (msedge) System.Diagnostics.Process (msedge) System.Diagnostics.Process (msedge) System.Diagnostics.Process (msedge) System.Diagnostics.Process (msedge) System.Diagnostics.Process (msedge) System.Diagnostics.Process (msedge) System.Diagnostics.Process (msedge) System.Diagnostics.Process (msedge) System.Diagnostics.Process (msedge) System.Diagnostics.Process (msedge) System.Diagnostics.Process (msedge) System.Diagnostics.Process (msedge) System.Diagnostics.Process (msedge) System.Diagnostics.Process (msedge) System.Diagnostics.Process (msedge) System.Diagnostics.Process (msedge) System.Diagnostics.Process (msedge) System.Diagnostics.Process (msedge) System.Diagnostics.Process (msedge) System.Diagnostics.Process (msedge) System.Diagnostics.Process (msedge) System.Diagnostics.Process (msedge) System.Diagnostics.Process (msedge) System.Diagnostics.Process (msedge) System.Diagnostics.Process (msedge) System.Diagnostics.Process (MsMpEng) System.Diagnostics.Process (MsSense) System.Diagnostics.Process (nahimicNotifSys) System.Diagnostics.Process (NahimicService) System.Diagnostics.Process (NahimicSvc32) System.Diagnostics.Process (NahimicSvc64) System.Diagnostics.Process (NisSrv) System.Diagnostics.Process (NVDisplay.Container) System.Diagnostics.Process (NVDisplay.Container) System.Diagnostics.Process (OfficeClickToRun) System.Diagnostics.Process (OneDrive) System.Diagnostics.Process (OneDrive) System.Diagnostics.Process (OneDrive) System.Diagnostics.Process (onenoteim) System.Diagnostics.Process (ONENOTEM) System.Diagnostics.Process (OpenConsole) System.Diagnostics.Process (OUTLOOK) System.Diagnostics.Process (paragon_service) System.Diagnostics.Process (PerfWatson2) System.Diagnostics.Process (PerfWatson2) System.Diagnostics.Process (PerfWatson2) System.Diagnostics.Process (pwsh) System.Diagnostics.Process (pwsh) System.Diagnostics.Process (pwsh) System.Diagnostics.Process (pwsh) System.Diagnostics.Process (pwsh) System.Diagnostics.Process (QualysAgent) System.Diagnostics.Process (Registry) System.Diagnostics.Process (rundll32) System.Diagnostics.Process (RuntimeBroker) System.Diagnostics.Process (RuntimeBroker) System.Diagnostics.Process (RuntimeBroker) System.Diagnostics.Process (RuntimeBroker) System.Diagnostics.Process (RuntimeBroker) System.Diagnostics.Process (RuntimeBroker) System.Diagnostics.Process (RuntimeBroker) System.Diagnostics.Process (RuntimeBroker) System.Diagnostics.Process (RuntimeBroker) System.Diagnostics.Process (RuntimeBroker) System.Diagnostics.Process (RuntimeBroker) System.Diagnostics.Process (RuntimeBroker) System.Diagnostics.Process (RuntimeBroker) System.Diagnostics.Process (RuntimeBroker) System.Diagnostics.Process (RuntimeBroker) System.Diagnostics.Process (RuntimeBroker) System.Diagnostics.Process (SCNotification) System.Diagnostics.Process (ScriptedSandbox64) System.Diagnostics.Process (ScriptedSandbox64) System.Diagnostics.Process (ScriptedSandbox64) System.Diagnostics.Process (SearchApp) System.Diagnostics.Process (SearchFilterHost) System.Diagnostics.Process (SearchIndexer) System.Diagnostics.Process (SearchProtocolHost) System.Diagnostics.Process (Secure System) System.Diagnostics.Process (SecurityHealthService) System.Diagnostics.Process (SecurityHealthSystray) System.Diagnostics.Process (SenseCE) System.Diagnostics.Process (SenseNdr) System.Diagnostics.Process (ServiceHub.DataWarehouseHost) System.Diagnostics.Process (ServiceHub.DataWarehouseHost) System.Diagnostics.Process (ServiceHub.DataWarehouseHost) System.Diagnostics.Process (ServiceHub.Host.CLR) System.Diagnostics.Process (ServiceHub.Host.CLR.x64) System.Diagnostics.Process (ServiceHub.Host.CLR.x64) System.Diagnostics.Process (ServiceHub.Host.CLR.x64) System.Diagnostics.Process (ServiceHub.Host.CLR.x86) System.Diagnostics.Process (ServiceHub.Host.CLR.x86) System.Diagnostics.Process (ServiceHub.Host.CLR.x86) System.Diagnostics.Process (ServiceHub.Host.CLR.x86) System.Diagnostics.Process (ServiceHub.Host.CLR.x86) System.Diagnostics.Process (ServiceHub.Host.CLR.x86) System.Diagnostics.Process (ServiceHub.Host.CLR.x86) System.Diagnostics.Process (ServiceHub.Host.CLR.x86) System.Diagnostics.Process (ServiceHub.IdentityHost) System.Diagnostics.Process (ServiceHub.IdentityHost) System.Diagnostics.Process (ServiceHub.IdentityHost) System.Diagnostics.Process (ServiceHub.RoslynCodeAnalysisService) System.Diagnostics.Process (ServiceHub.RoslynCodeAnalysisServiceS) System.Diagnostics.Process (ServiceHub.RoslynCodeAnalysisServiceS) System.Diagnostics.Process (ServiceHub.SettingsHost) System.Diagnostics.Process (ServiceHub.SettingsHost) System.Diagnostics.Process (ServiceHub.SettingsHost) System.Diagnostics.Process (ServiceHub.TestWindowStoreHost) System.Diagnostics.Process (ServiceHub.TestWindowStoreHost) System.Diagnostics.Process (ServiceHub.TestWindowStoreHost) System.Diagnostics.Process (ServiceHub.ThreadedWaitDialog) System.Diagnostics.Process (ServiceHub.ThreadedWaitDialog) System.Diagnostics.Process (ServiceHub.VSDetouredHost) System.Diagnostics.Process (ServiceHub.VSDetouredHost) System.Diagnostics.Process (ServiceHub.VSDetouredHost) System.Diagnostics.Process (services) System.Diagnostics.Process (SettingSyncHost) System.Diagnostics.Process (SgrmBroker) System.Diagnostics.Process (ShellExperienceHost) System.Diagnostics.Process (sihost) System.Diagnostics.Process (Skype) System.Diagnostics.Process (Skype) System.Diagnostics.Process (Skype) System.Diagnostics.Process (Skype) System.Diagnostics.Process (Skype) System.Diagnostics.Process (Skype) System.Diagnostics.Process (smartscreen) System.Diagnostics.Process (smss) System.Diagnostics.Process (spoolsv) System.Diagnostics.Process (sqlwriter) System.Diagnostics.Process (StartMenuExperienceHost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (svchost) System.Diagnostics.Process (System) System.Diagnostics.Process (SystemSettings) System.Diagnostics.Process (taskhostw) System.Diagnostics.Process (Teams) System.Diagnostics.Process (Teams) System.Diagnostics.Process (Teams) System.Diagnostics.Process (Teams) System.Diagnostics.Process (Teams) System.Diagnostics.Process (Teams) System.Diagnostics.Process (Teams) System.Diagnostics.Process (Teams) System.Diagnostics.Process (Teams) System.Diagnostics.Process (Teams) System.Diagnostics.Process (TextInputHost) System.Diagnostics.Process (touchcursor) System.Diagnostics.Process (uhssvc) System.Diagnostics.Process (UserOOBEBroker) System.Diagnostics.Process (vds) System.Diagnostics.Process (Video.UI) System.Diagnostics.Process (vmcompute) System.Diagnostics.Process (vmmem) System.Diagnostics.Process (vmmem) System.Diagnostics.Process (vmms) System.Diagnostics.Process (vmwp) System.Diagnostics.Process (vsls-agent) System.Diagnostics.Process (vsls-agent) System.Diagnostics.Process (vstest.console) System.Diagnostics.Process (vstest.console) System.Diagnostics.Process (vstest.console) System.Diagnostics.Process (WindowsTerminal) System.Diagnostics.Process (wininit) System.Diagnostics.Process (winlogon) System.Diagnostics.Process (WinStore.App) System.Diagnostics.Process (WmiPrvSE) System.Diagnostics.Process (WmiPrvSE) System.Diagnostics.Process (WmiPrvSE) System.Diagnostics.Process (WmiPrvSE) System.Diagnostics.Process (WmiPrvSE) System.Diagnostics.Process (WmiPrvSE) System.Diagnostics.Process (WmiPrvSE) System.Diagnostics.Process (WmiPrvSE) System.Diagnostics.Process (WUDFHost) System.Diagnostics.Process (WUDFHost) System.Diagnostics.Process (YourPhone)' of type 'System.Object[]' it returns $true" time="0.0035" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="Is-Collection.Given an object '&lt;value&gt;' of type '&lt;value.GetType()&gt;' that is not a collection it returns $false" executed="True" result="Success" success="True" time="0.0428" asserts="0" description="Given an object '&lt;value&gt;' of type '&lt;value.GetType()&gt;' that is not a collection it returns $false">
                <results>
                  <test-case description="Given an object 'a' of type 'char' that is not a collection it returns $false" name="Is-Collection.Given an object 'a' of type 'char' that is not a collection it returns $false" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given an object 'a' of type 'string' that is not a collection it returns $false" name="Is-Collection.Given an object 'a' of type 'string' that is not a collection it returns $false" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given an object '1' of type 'int' that is not a collection it returns $false" name="Is-Collection.Given an object '1' of type 'int' that is not a collection it returns $false" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given an object '1' of type 'decimal' that is not a collection it returns $false" name="Is-Collection.Given an object '1' of type 'decimal' that is not a collection it returns $false" time="0.0047" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given an object '1.1' of type 'double' that is not a collection it returns $false" name="Is-Collection.Given an object '1.1' of type 'double' that is not a collection it returns $false" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given an object '101' of type 'int' that is not a collection it returns $false" name="Is-Collection.Given an object '101' of type 'int' that is not a collection it returns $false" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given an object '101' of type 'long' that is not a collection it returns $false" name="Is-Collection.Given an object '101' of type 'long' that is not a collection it returns $false" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given an object '101' of type 'decimal' that is not a collection it returns $false" name="Is-Collection.Given an object '101' of type 'decimal' that is not a collection it returns $false" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given an object '101.1' of type 'double' that is not a collection it returns $false" name="Is-Collection.Given an object '101.1' of type 'double' that is not a collection it returns $false" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given an object '1048576' of type 'int' that is not a collection it returns $false" name="Is-Collection.Given an object '1048576' of type 'int' that is not a collection it returns $false" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given an object '1048576' of type 'decimal' that is not a collection it returns $false" name="Is-Collection.Given an object '1048576' of type 'decimal' that is not a collection it returns $false" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given an object '1153433.6' of type 'double' that is not a collection it returns $false" name="Is-Collection.Given an object '1153433.6' of type 'double' that is not a collection it returns $false" time="0.0049" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given an object '' of type 'scriptblock' that is not a collection it returns $false" name="Is-Collection.Given an object '' of type 'scriptblock' that is not a collection it returns $false" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given an object 'System.Collections.Hashtable' of type 'hashtable' that is not a collection it returns $false" name="Is-Collection.Given an object 'System.Collections.Hashtable' of type 'hashtable' that is not a collection it returns $false" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given an object 'System.Collections.Hashtable' of type 'hashtable' that is not a collection it returns $false" name="Is-Collection.Given an object 'System.Collections.Hashtable' of type 'hashtable' that is not a collection it returns $false" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given an object 'System.Diagnostics.Process (pwsh)' of type 'System.Diagnostics.Process' that is not a collection it returns $false" name="Is-Collection.Given an object 'System.Diagnostics.Process (pwsh)' of type 'System.Diagnostics.Process' that is not a collection it returns $false" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given an object 'System.Diagnostics.Process' of type 'System.Diagnostics.Process' that is not a collection it returns $false" name="Is-Collection.Given an object 'System.Diagnostics.Process' of type 'System.Diagnostics.Process' that is not a collection it returns $false" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="Is-Collection.Given '$null' it returns $false" executed="True" result="Success" success="True" time="0.0022" asserts="0" description="Given '$null' it returns $false">
                <results>
                  <test-case description="Given '$null' it returns $false" name="Is-Collection.Given '$null' it returns $false(null)" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
    </results>
  </test-suite>
</test-results>